****base_global_planner_param.yaml
GlobalPlanner:
  old_navfn_behavior: false #若在某些情况下,想让global_planner完全复制navfn的功能,那就设置为true
  use_quadratic: true #设置为true,将使用二次函数近似函数,否则使用更加简单的计算方式,这样节省硬件计算资源.
  use_dijkstra: true #设置为true,将使用dijkstra算法,否则使用A*算法
  use_grid_path: false #如果设置为true,则会规划一条沿着网格边界的路径,偏向于直线穿越网格,否则将使用梯度下降算法,路径更为光滑点
  allow_unknown: false #是否允许规划器规划穿过未知区域的路径,只设计该参数为true还不行,还要在costmap_commons_params.yaml中设置track_unknown_space参数也为true才行 
  planner_window_x: 0.0 #
  planner_window_y: 0.0
  default_tolerance: 0.0 #当设置的目的地被障碍物占据时,需要以该参数为半径寻找到最近的点作为新目的地点.
  
****base_local_planner_params.yaml  
controller_frequency: 3.0 #控制器的频率
recovery_behavior_enabled: true #清除costmap 开关
clearing_rotation_allowed: true
TrajectoryPlannerROS:
  max_vel_x: 0.2 #最大线速度
  min_vel_x: 0.05 #最小线速度
  max_vel_y: 0.0  
  min_vel_y: 0.0
  min_in_place_vel_theta: 0.5 #最小角速度
  escape_vel: -0.1
  acc_lim_x: 0.5 #线加速度
  acc_lim_y: 0.0 
  acc_lim_theta: 0.5  #角加速度
  holonomic_robot: false
  yaw_goal_tolerance: 0.1 #代表当到达目标时，控制器的偏航/旋转误差,6度
  xy_goal_tolerance: 0.1 #到到达目标时，控制器在X Y的位置误差，10cm
  latch_xy_goal_tolerance: false #如果目标误差被锁定，若机器人达到目标XY位置，它将旋转到位，即使误差没有达到，也会做旋转
  pdist_scale: 0.8 #控制器距离给定的路径有多近的加权值
  gdist_scale: 0.4 #控制器试图达到局部目标，或者是控制速度的加权值
  meter_scoring: true #假设goal_distance and path_distance以米为单位被表示，gdist_scale和pdist_scale参数是否呈现
  heading_lookahead: 0.325
  heading_scoring: true
  heading_scoring_timestep: 0.8
  occdist_scale: 0.5
  oscillation_reset_dist: 0.05 #在震荡标志复位之前，机器人必须走多远
  publish_cost_grid_pc: false
  prune_plan: true #当机器人沿着路径走时，是否要耗尽路径。如果为true，机器人移动过的1米时，点将会在计划中消失。
  sim_time: 1.0 #轨迹模拟时间
  sim_granularity: 0.025 #给定轨迹两点之间的间隔尺寸
  angular_sim_granularity: 0.025 #给定轨迹两点之间的间隔角度
  vx_samples: 8 #在X方向上速度空间使用的样本数
  vy_samples: 0 #差分驱动机器人要设置为0
  vtheta_samples: 20 #在角度上速度空间使用的样本数
  dwa: true #是否用DWA模式
  simple_attractor: false

****costmap_common_params.yaml
footprint: [[-0.283, -0.283], [-0.283, 0.283],[0.283, 0.283], [0.283, -0.283]] #机器人模型

obstacle_layer:  #costmap动态层构成
  enabled: true
  max_obstacle_height: 1.2  #costmap动态层最大高度
  min_obstacle_height: 0.0
  obstacle_range: 2.0 #动态层范围为2m*5m
  raytrace_range: 5.0
  inflation_radius: 0.30 #动态层障碍物膨胀半径
  combination_method: 1
  observation_sources: laser_scan_sensor laser_scan_sensor_2 laser_scan_sensor_3 sonar_scan_sensor camera_depth #动态层传感器数据源
  track_unknown_space: false #是否允许从未知区域规划穿过
 
  origin_z: 0.0
  z_resolution: 0.1 #动态层每一层的高度
  z_voxels: 10  #动态层一共分10层
  unknown_threshold: 15
  mark_threshold: 0
  publish_voxel_map: true
  footprint_clearing_enabled: true #允许清楚机器人当前足迹
  observation_persistence: 0.0

  laser_scan_sensor_2: #2号雷达(下雷达)数据来源设置
    data_type: LaserScan #2号雷达数据类型
    topic: /scan_2 #2号雷达数据来源主题
    marking: true 
    clearing: true #数据允许清除
    expected_update_rate: 0
    min_obstacle_height: 0.01 #该数据在动态层的高度范围应为0.01～0.1
    max_obstacle_height: 0.1

  sonar_scan_sensor: #超声波数据来源设置
    data_type: PointCloud2 #超声波数据类型，6个超声波为一组数据并转成PointCloud2
    topic: /sonar_cloudpoint #超声波数据主题
    marking: true
    clearing: true
    min_obstacle_height: 0.11 #超声波数据z轴高度应该在动态层高度范围0.11～0.2内
    max_obstacle_height: 0.2

  laser_scan_sensor: #1号雷达(上雷达)数据来源设置
    data_type: LaserScan #1号雷达数据类型
    topic: /scan #1号雷达数据主题
    marking: true
    clearing: true #数据允许清除
    expected_update_rate: 0
    min_obstacle_height: 0.21 #该数据在动态层的高度范围应为0.21～0.3
    max_obstacle_height: 0.30

  camera_depth: #深度摄像头数据来源设置
    data_type: PointCloud2 #深度摄像头数据类型
    topic: /camera/depth_registered/points #深度摄像头数据主题
    marking: ture
    clearing: true #数据允许清除
    min_obstacle_height: 0.51 #该数据在动态层的高度范围应为0.51～1.0
    max_obstacle_height: 1.0
    
inflation_layer: #costmap 膨胀层
  enabled:              true
  cost_scaling_factor:  10.0  #障碍物清楚速度
  inflation_radius:     0.30 #障碍物膨胀半径

static_layer:  #costmap 静态层
  enabled:              true
  map_topic:            "/map"

virtualWall_layer: #costmap 虚拟墙层
  enabled:              true
  topic:  "/virtualWall_cloudPoint"
  map_topic:            "/map"

****global_costmap_params.yaml
global_costmap:
   global_frame: /map  #全局框架
   robot_base_frame: /base_footprint #机器人框架
   update_frequency: 1.5 #全局路径规划更新频率
   publish_frequency: 1.0 #全局路径规划发布频率
   static_map: true #是否是静态地图
   rolling_window: false #是否为滚动窗口
   resolution: 0.05 #地图分辨率
   transform_tolerance: 1.0 #tf转换事件
   map_type: costmap #地图类型为代价地图

   plugins: #全局地图构成氛围静态层，动态层，虚拟墙层，膨胀层
   - {name: static_layer,        type: "costmap_2d::StaticLayer"}
   - {name: obstacle_layer,      type: "costmap_2d::VoxelLayer"}
   - {name: virtualWall_layer,   type: "costmap_2d::VirtualWallLayer"}
   - {name: inflation_layer,     type: "costmap_2d::InflationLayer"}

GlobalPlanner:        
   allow_unknown: false #是否运行从未知区域规划

****local_costmap_params.yaml
local_costmap:
   global_frame: /odom_combined #局部costmap地图框架为odom_combined，这是带陀螺仪的框架
   robot_base_frame: /base_footprint #局部costmap地图机器人框架
   update_frequency: 3.0 #局部地图更新频率
   publish_frequency: 1.0
   static_map: false #不是静态地图
   rolling_window: true #会滚动窗口
   width: 3.0 #局部costmap地图范围为3m*3m
   height: 3.0
   resolution: 0.05 #局部地图分辨率
   transform_tolerance: 1.0
   map_type: costmap #局部地图为代价地图

   plugins: #局部代价地图有静态层，动态层，虚拟墙层，膨胀层构成
     - {name: static_layer,        type: "costmap_2d::StaticLayer"}
     - {name: obstacle_layer,      type: "costmap_2d::VoxelLayer"}
     - {name: virtualWall_layer,   type: "costmap_2d::VirtualWallLayer"}
     - {name: inflation_layer,     type: "costmap_2d::InflationLayer"}

****move_base_params.yaml
shutdown_costmaps: false #当move_base在不活动状态时,是否关掉costmap
controller_frequency: 4.0 #向底盘发送控制命令的频率(往cmd_vel主题中发)
controller_patience: 3.0 #在空间清理操作执行前,控制器花多长时间等有效控制下发

planner_frequency: 1.0 #全局规划操作的执行频率.如果设置为0.0,则全局规划器仅在接收到新的目标点或者局部规划器报告路径堵塞时才会重新执行规划操作
planner_patience: 3.0 #在空间清理操作执行前,留给规划器多长时间来找出一条有效规划
oscillation_timeout: 5.0 #执行修复机制前,允许振荡的时长
oscillation_distance: 0.2 #来回运动在多大距离以上不会被认为是振荡
base_global_planner: "global_planner/GlobalPlanner" #指定全局规划器为global
base_local_planner: "teb_local_planner/TebLocalPlannerROS" ##指定局部规划器为teb
max_planning_retries: 1
recovery_behavior_enabled: true
clearing_rotation_allowed: true
useMagnetometer: False
auto_update_: False
particle_range: 1.0
angle_tolerance: 0.05
recovery_behaviors: #清除costmap 的策略
  - name: 'aggressive_reset' #清除0.3m外的costmap
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'clearing_rotation' #清除5m外的costmap
    type: 'rotate_recovery/RotateRecovery'    

aggressive_reset:
  reset_distance: 0.3
  #layer_names: [static_layer, obstacle_layer, inflation_layer]
  layer_names: [obstacle_layer]

clearing_rotation:
  reset_distance: 5.0
  #layer_names: [static_layer, obstacle_layer, inflation_layer]
  layer_names: [obstacle_layer]

move_slow_and_clear: #机器人低速移动时限制
  clearing_distance: 0.5
  limited_trans_speed: 0.1 #转动速度为0.1
  limited_rot_speed: 0.4 #行走速度为0.4
  limited_distance: 0.3

****teb_local_planner_params.yaml
TebLocalPlannerROS:
 odom_topic: odom #机器人原始odom框架
 map_frame: /odom_combined #机器人融合imu后的框架
 teb_autosize: True
 dt_ref: 0.45 #期望的轨迹时间分辨率
 dt_hysteresis: 0.1 #根据当前时间分辨率自动调整大小的滞后现象，建议使用dt ref的10%
 global_plan_overwrite_orientation: True #覆盖由全局规划器提供的局部子目标的方向
 max_global_plan_lookahead_dist: 3.0 #指定考虑优化的全局计划子集的最大长度
 feasibility_check_no_poses: 5 #每个采样间隔的姿态可行性分析数

 max_vel_x: 0.6  #最大移动速度
 max_vel_x_backwards: 0.15 #后退时最大线速度
 max_vel_theta: 0.30 #最大角速度
 acc_lim_x: 0.30 #线加速度
 acc_lim_theta: 0.30 #角加速度
 min_turning_radius: 0.0 #最小转弯半径
 footprint_model: #机器人模型
   vertices: [[-0.283, -0.283], [-0.283, 0.283],[0.283, 0.283], [0.283, -0.283]]

 xy_goal_tolerance: 0.05 #导航到达目标时允许xy轴方向误差为5cm
 yaw_goal_tolerance: 0.1 #导航到达目标时允许角度误差为6度
 free_goal_vel: False

 min_obstacle_dist: 0.25 #底盘中心离障碍物最小距离
 include_costmap_obstacles: True #应否考虑到局部costmap的障碍
 costmap_obstacles_behind_robot_dist: 1.0 #考虑后面n米内的障碍物
 obstacle_poses_affected: 7 #为了保持距离，每个障碍物位置都与轨道上最近的位置相连
 costmap_converter_plugin: "" #定义插件名称，用于将costmap的单元格转换成点/线/多边形。若设置为空字符，则视为禁用转换，将所有点视为点障碍
 costmap_converter_spin_thread: True  #如果为true，则costmap转换器将以不同的线程调用其回调队列
 costmap_converter_rate: 5 #定义costmap_converter插件处理当前costmap的频率（该值不高于costmap更新率

 no_inner_iterations: 5 #在每个外循环迭代中调用的实际求解器迭代次数
 no_outer_iterations: 4 #在每个外循环迭代中调用的实际求解器迭代次数
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.1 #为硬约束近似的惩罚函数添加一个小的安全范围
 weight_max_vel_x: 2 #满足最大允许平移速度的优化权重
 weight_max_vel_theta: 1 #满足最大允许平移速度的优化权重
 weight_acc_lim_x: 1 #满足最大允许平移加速度的优化权重
 weight_acc_lim_theta: 1  #满足最大允许角加速度的优化权重。
 weight_kinematics_nh: 1000 #允许后退权重，越大越不能后退
 weight_kinematics_forward_drive: 40  #强制机器人仅选择正向（正的平移速度）的优化权重
 weight_kinematics_turning_radius: 1 #采用最小转向半径的优化权重
 weight_optimaltime: 1 #根据转换/执行时间对轨迹进行收缩的优化权重
 weight_obstacle: 50 #保持与障碍物的最小距离的优化权重
 weight_dynamic_obstacle: 10 # not in use yet
 selection_alternative_time_cost: False # not in use yet

 enable_homotopy_class_planning: False #激活并行规划（因为一次优化多个轨迹，占用更多的CPU资源
 enable_multithreading: True #激活多个线程，以便在不同的线程中规划每个轨迹
 simple_exploration: False
 max_number_classes: 4 #考虑到的不同轨迹的最大数量
 roadmap_graph_no_samples: 15 #指定为创建路线图而生成的样本数
 roadmap_graph_area_width: 5 #指定该区域的宽度
 h_signature_prescaler: 0.5  #（0.2 < value <= 1）缩放用于区分同伦类的内部参数（H-signature）。警告：只能减少此参数，如果在局部costmap中遇到太多障碍物的情况，请勿选择极低值，否则无法将障碍物彼此区分开线缩放用于区分同伦类的内部参数（H-signature）。
 h_signature_threshold: 0.1 ##如果实部和复部的差都低于规定的阈值，则假定两个h签名相等。
 obstacle_keypoint_offset: 0.1
 obstacle_heading_threshold: 0.45
 visualize_hc_graph: False #可视化创建的图形，用于探索不同的轨迹（在rviz中检查标记消息）










