// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/local_trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_2d/proto/local_trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_2d {
namespace proto {
class LocalTrajectoryBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions>
     _instance;
} _LocalTrajectoryBuilderOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, min_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, max_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, min_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, max_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, missing_data_ray_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, num_accumulated_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, voxel_filter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, loop_closure_adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, use_online_correlative_scan_matching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, real_time_correlative_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, ceres_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, motion_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, imu_gravity_time_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, submaps_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, use_imu_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LocalTrajectoryBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalTrajectoryBuilderOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping_2d/proto/local_trajectory_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::InitDefaults();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2fsubmaps_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  _LocalTrajectoryBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LocalTrajectoryBuilderOptions_default_instance_);_LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->loop_closure_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions*>(
      ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->motion_filter_options_ = const_cast< ::cartographer::mapping::proto::MotionFilterOptions*>(
      ::cartographer::mapping::proto::MotionFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->submaps_options_ = const_cast< ::cartographer::mapping_2d::proto::SubmapsOptions*>(
      ::cartographer::mapping_2d::proto::SubmapsOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nDcartographer/mapping_2d/proto/local_tr"
      "ajectory_builder_options.proto\022\035cartogra"
      "pher.mapping_2d.proto\0326cartographer/mapp"
      "ing/proto/motion_filter_options.proto\032=c"
      "artographer/sensor/proto/adaptive_voxel_"
      "filter_options.proto\0323cartographer/mappi"
      "ng_2d/proto/submaps_options.proto\032Lcarto"
      "grapher/mapping_2d/scan_matching/proto/c"
      "eres_scan_matcher_options.proto\032\\cartogr"
      "apher/mapping_2d/scan_matching/proto/rea"
      "l_time_correlative_scan_matcher_options."
      "proto\"\376\006\n\035LocalTrajectoryBuilderOptions\022"
      "\021\n\tmin_range\030\016 \001(\002\022\021\n\tmax_range\030\017 \001(\002\022\r\n"
      "\005min_z\030\001 \001(\002\022\r\n\005max_z\030\002 \001(\002\022\037\n\027missing_d"
      "ata_ray_length\030\020 \001(\002\022\"\n\032num_accumulated_"
      "range_data\030\023 \001(\005\022\031\n\021voxel_filter_size\030\003 "
      "\001(\002\022\\\n\035adaptive_voxel_filter_options\030\006 \001"
      "(\01325.cartographer.sensor.proto.AdaptiveV"
      "oxelFilterOptions\022i\n*loop_closure_adapti"
      "ve_voxel_filter_options\030\024 \001(\01325.cartogra"
      "pher.sensor.proto.AdaptiveVoxelFilterOpt"
      "ions\022,\n$use_online_correlative_scan_matc"
      "hing\030\005 \001(\010\022\206\001\n*real_time_correlative_sca"
      "n_matcher_options\030\007 \001(\0132R.cartographer.m"
      "apping_2d.scan_matching.proto.RealTimeCo"
      "rrelativeScanMatcherOptions\022h\n\032ceres_sca"
      "n_matcher_options\030\010 \001(\0132D.cartographer.m"
      "apping_2d.scan_matching.proto.CeresScanM"
      "atcherOptions\022N\n\025motion_filter_options\030\r"
      " \001(\0132/.cartographer.mapping.proto.Motion"
      "FilterOptions\022!\n\031imu_gravity_time_consta"
      "nt\030\021 \001(\001\022F\n\017submaps_options\030\013 \001(\0132-.cart"
      "ographer.mapping_2d.proto.SubmapsOptions"
      "\022\024\n\014use_imu_data\030\014 \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_2d/proto/local_trajectory_builder_options.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::AddDescriptors();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2fsubmaps_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalTrajectoryBuilderOptions::kMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions::kMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions::kMinZFieldNumber;
const int LocalTrajectoryBuilderOptions::kMaxZFieldNumber;
const int LocalTrajectoryBuilderOptions::kMissingDataRayLengthFieldNumber;
const int LocalTrajectoryBuilderOptions::kNumAccumulatedRangeDataFieldNumber;
const int LocalTrajectoryBuilderOptions::kVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions::kAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kLoopClosureAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kImuGravityTimeConstantFieldNumber;
const int LocalTrajectoryBuilderOptions::kSubmapsOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kUseImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
}
LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions(const LocalTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_adaptive_voxel_filter_options()) {
    adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.adaptive_voxel_filter_options_);
  } else {
    adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from.real_time_correlative_scan_matcher_options_);
  } else {
    real_time_correlative_scan_matcher_options_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = NULL;
  }
  if (from.has_submaps_options()) {
    submaps_options_ = new ::cartographer::mapping_2d::proto::SubmapsOptions(*from.submaps_options_);
  } else {
    submaps_options_ = NULL;
  }
  if (from.has_motion_filter_options()) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions(*from.motion_filter_options_);
  } else {
    motion_filter_options_ = NULL;
  }
  if (from.has_loop_closure_adaptive_voxel_filter_options()) {
    loop_closure_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.loop_closure_adaptive_voxel_filter_options_);
  } else {
    loop_closure_adaptive_voxel_filter_options_ = NULL;
  }
  ::memcpy(&min_z_, &from.min_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_accumulated_range_data_) -
    reinterpret_cast<char*>(&min_z_)) + sizeof(num_accumulated_range_data_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
}

void LocalTrajectoryBuilderOptions::SharedCtor() {
  ::memset(&adaptive_voxel_filter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accumulated_range_data_) -
      reinterpret_cast<char*>(&adaptive_voxel_filter_options_)) + sizeof(num_accumulated_range_data_));
  _cached_size_ = 0;
}

LocalTrajectoryBuilderOptions::~LocalTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete real_time_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete submaps_options_;
  if (this != internal_default_instance()) delete motion_filter_options_;
  if (this != internal_default_instance()) delete loop_closure_adaptive_voxel_filter_options_;
}

void LocalTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalTrajectoryBuilderOptions& LocalTrajectoryBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalTrajectoryBuilderOptions* LocalTrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  LocalTrajectoryBuilderOptions* n = new LocalTrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalTrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && adaptive_voxel_filter_options_ != NULL) {
    delete adaptive_voxel_filter_options_;
  }
  adaptive_voxel_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) {
    delete submaps_options_;
  }
  submaps_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && loop_closure_adaptive_voxel_filter_options_ != NULL) {
    delete loop_closure_adaptive_voxel_filter_options_;
  }
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  ::memset(&min_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accumulated_range_data_) -
      reinterpret_cast<char*>(&min_z_)) + sizeof(num_accumulated_range_data_));
  _internal_metadata_.Clear();
}

bool LocalTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_z = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float voxel_filter_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_filter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_online_correlative_scan_matching = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_imu_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_imu_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_range = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_range = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float missing_data_ray_length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &missing_data_ray_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double imu_gravity_time_constant = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_accumulated_range_data = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accumulated_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_closure_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  return false;
#undef DO_
}

void LocalTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_z = 1;
  if (this->min_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_z(), output);
  }

  // float max_z = 2;
  if (this->max_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_z(), output);
  }

  // float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->voxel_filter_size(), output);
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_online_correlative_scan_matching(), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->adaptive_voxel_filter_options_, output);
  }

  // .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->real_time_correlative_scan_matcher_options_, output);
  }

  // .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ceres_scan_matcher_options_, output);
  }

  // .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
  if (this->has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->submaps_options_, output);
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_imu_data(), output);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->motion_filter_options_, output);
  }

  // float min_range = 14;
  if (this->min_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->min_range(), output);
  }

  // float max_range = 15;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->max_range(), output);
  }

  // float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->missing_data_ray_length(), output);
  }

  // double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->imu_gravity_time_constant(), output);
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_accumulated_range_data(), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->loop_closure_adaptive_voxel_filter_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_z = 1;
  if (this->min_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_z(), target);
  }

  // float max_z = 2;
  if (this->max_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_z(), target);
  }

  // float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->voxel_filter_size(), target);
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_online_correlative_scan_matching(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->adaptive_voxel_filter_options_, deterministic, target);
  }

  // .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->real_time_correlative_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ceres_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
  if (this->has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->submaps_options_, deterministic, target);
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_imu_data(), target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->motion_filter_options_, deterministic, target);
  }

  // float min_range = 14;
  if (this->min_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->min_range(), target);
  }

  // float max_range = 15;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->max_range(), target);
  }

  // float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->missing_data_ray_length(), target);
  }

  // double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->imu_gravity_time_constant(), target);
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_accumulated_range_data(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->loop_closure_adaptive_voxel_filter_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  return target;
}

size_t LocalTrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_time_correlative_scan_matcher_options_);
  }

  // .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ceres_scan_matcher_options_);
  }

  // .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
  if (this->has_submaps_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submaps_options_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_filter_options_);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loop_closure_adaptive_voxel_filter_options_);
  }

  // float min_z = 1;
  if (this->min_z() != 0) {
    total_size += 1 + 4;
  }

  // float max_z = 2;
  if (this->max_z() != 0) {
    total_size += 1 + 4;
  }

  // float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    total_size += 1 + 4;
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    total_size += 1 + 1;
  }

  // float min_range = 14;
  if (this->min_range() != 0) {
    total_size += 1 + 4;
  }

  // float max_range = 15;
  if (this->max_range() != 0) {
    total_size += 1 + 4;
  }

  // double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 2 + 8;
  }

  // float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    total_size += 2 + 4;
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_accumulated_range_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalTrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions::MergeFrom(const LocalTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_adaptive_voxel_filter_options()) {
    mutable_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.adaptive_voxel_filter_options());
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
  }
  if (from.has_ceres_scan_matcher_options()) {
    mutable_ceres_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::MergeFrom(from.ceres_scan_matcher_options());
  }
  if (from.has_submaps_options()) {
    mutable_submaps_options()->::cartographer::mapping_2d::proto::SubmapsOptions::MergeFrom(from.submaps_options());
  }
  if (from.has_motion_filter_options()) {
    mutable_motion_filter_options()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
  }
  if (from.has_loop_closure_adaptive_voxel_filter_options()) {
    mutable_loop_closure_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.loop_closure_adaptive_voxel_filter_options());
  }
  if (from.min_z() != 0) {
    set_min_z(from.min_z());
  }
  if (from.max_z() != 0) {
    set_max_z(from.max_z());
  }
  if (from.voxel_filter_size() != 0) {
    set_voxel_filter_size(from.voxel_filter_size());
  }
  if (from.use_online_correlative_scan_matching() != 0) {
    set_use_online_correlative_scan_matching(from.use_online_correlative_scan_matching());
  }
  if (from.use_imu_data() != 0) {
    set_use_imu_data(from.use_imu_data());
  }
  if (from.min_range() != 0) {
    set_min_range(from.min_range());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.missing_data_ray_length() != 0) {
    set_missing_data_ray_length(from.missing_data_ray_length());
  }
  if (from.num_accumulated_range_data() != 0) {
    set_num_accumulated_range_data(from.num_accumulated_range_data());
  }
}

void LocalTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions::CopyFrom(const LocalTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions::Swap(LocalTrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalTrajectoryBuilderOptions::InternalSwap(LocalTrajectoryBuilderOptions* other) {
  using std::swap;
  swap(adaptive_voxel_filter_options_, other->adaptive_voxel_filter_options_);
  swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(submaps_options_, other->submaps_options_);
  swap(motion_filter_options_, other->motion_filter_options_);
  swap(loop_closure_adaptive_voxel_filter_options_, other->loop_closure_adaptive_voxel_filter_options_);
  swap(min_z_, other->min_z_);
  swap(max_z_, other->max_z_);
  swap(voxel_filter_size_, other->voxel_filter_size_);
  swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  swap(use_imu_data_, other->use_imu_data_);
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(missing_data_ray_length_, other->missing_data_ray_length_);
  swap(num_accumulated_range_data_, other->num_accumulated_range_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalTrajectoryBuilderOptions

// float min_range = 14;
void LocalTrajectoryBuilderOptions::clear_min_range() {
  min_range_ = 0;
}
float LocalTrajectoryBuilderOptions::min_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.min_range)
  return min_range_;
}
void LocalTrajectoryBuilderOptions::set_min_range(float value) {
  
  min_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.min_range)
}

// float max_range = 15;
void LocalTrajectoryBuilderOptions::clear_max_range() {
  max_range_ = 0;
}
float LocalTrajectoryBuilderOptions::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.max_range)
  return max_range_;
}
void LocalTrajectoryBuilderOptions::set_max_range(float value) {
  
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.max_range)
}

// float min_z = 1;
void LocalTrajectoryBuilderOptions::clear_min_z() {
  min_z_ = 0;
}
float LocalTrajectoryBuilderOptions::min_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.min_z)
  return min_z_;
}
void LocalTrajectoryBuilderOptions::set_min_z(float value) {
  
  min_z_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.min_z)
}

// float max_z = 2;
void LocalTrajectoryBuilderOptions::clear_max_z() {
  max_z_ = 0;
}
float LocalTrajectoryBuilderOptions::max_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.max_z)
  return max_z_;
}
void LocalTrajectoryBuilderOptions::set_max_z(float value) {
  
  max_z_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.max_z)
}

// float missing_data_ray_length = 16;
void LocalTrajectoryBuilderOptions::clear_missing_data_ray_length() {
  missing_data_ray_length_ = 0;
}
float LocalTrajectoryBuilderOptions::missing_data_ray_length() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.missing_data_ray_length)
  return missing_data_ray_length_;
}
void LocalTrajectoryBuilderOptions::set_missing_data_ray_length(float value) {
  
  missing_data_ray_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.missing_data_ray_length)
}

// int32 num_accumulated_range_data = 19;
void LocalTrajectoryBuilderOptions::clear_num_accumulated_range_data() {
  num_accumulated_range_data_ = 0;
}
::google::protobuf::int32 LocalTrajectoryBuilderOptions::num_accumulated_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.num_accumulated_range_data)
  return num_accumulated_range_data_;
}
void LocalTrajectoryBuilderOptions::set_num_accumulated_range_data(::google::protobuf::int32 value) {
  
  num_accumulated_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.num_accumulated_range_data)
}

// float voxel_filter_size = 3;
void LocalTrajectoryBuilderOptions::clear_voxel_filter_size() {
  voxel_filter_size_ = 0;
}
float LocalTrajectoryBuilderOptions::voxel_filter_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.voxel_filter_size)
  return voxel_filter_size_;
}
void LocalTrajectoryBuilderOptions::set_voxel_filter_size(float value) {
  
  voxel_filter_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.voxel_filter_size)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
bool LocalTrajectoryBuilderOptions::has_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && adaptive_voxel_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions::clear_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && adaptive_voxel_filter_options_ != NULL) delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_adaptive_voxel_filter_options() {
  
  if (adaptive_voxel_filter_options_ == NULL) {
    adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.adaptive_voxel_filter_options)
  return adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  if (adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.adaptive_voxel_filter_options)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
bool LocalTrajectoryBuilderOptions::has_loop_closure_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && loop_closure_adaptive_voxel_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions::clear_loop_closure_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && loop_closure_adaptive_voxel_filter_options_ != NULL) delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::loop_closure_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = loop_closure_adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.loop_closure_adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_loop_closure_adaptive_voxel_filter_options() {
  
  if (loop_closure_adaptive_voxel_filter_options_ == NULL) {
    loop_closure_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.loop_closure_adaptive_voxel_filter_options)
  return loop_closure_adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_loop_closure_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.loop_closure_adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_loop_closure_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options) {
  delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = loop_closure_adaptive_voxel_filter_options;
  if (loop_closure_adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.loop_closure_adaptive_voxel_filter_options)
}

// bool use_online_correlative_scan_matching = 5;
void LocalTrajectoryBuilderOptions::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
}
bool LocalTrajectoryBuilderOptions::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
  return use_online_correlative_scan_matching_;
}
void LocalTrajectoryBuilderOptions::set_use_online_correlative_scan_matching(bool value) {
  
  use_online_correlative_scan_matching_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
}

// .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
bool LocalTrajectoryBuilderOptions::has_real_time_correlative_scan_matcher_options() const {
  return this != internal_default_instance() && real_time_correlative_scan_matcher_options_ != NULL;
}
void LocalTrajectoryBuilderOptions::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
}
const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions::real_time_correlative_scan_matcher_options() const {
  const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* p = real_time_correlative_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      &::cartographer::mapping_2d::scan_matching::proto::_RealTimeCorrelativeScanMatcherOptions_default_instance_);
}
::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_real_time_correlative_scan_matcher_options() {
  
  if (real_time_correlative_scan_matcher_options_ == NULL) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_;
}
::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::release_real_time_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
}

// .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 8;
bool LocalTrajectoryBuilderOptions::has_ceres_scan_matcher_options() const {
  return this != internal_default_instance() && ceres_scan_matcher_options_ != NULL;
}
void LocalTrajectoryBuilderOptions::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
}
const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions& LocalTrajectoryBuilderOptions::ceres_scan_matcher_options() const {
  const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* p = ceres_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions*>(
      &::cartographer::mapping_2d::scan_matching::proto::_CeresScanMatcherOptions_default_instance_);
}
::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_ceres_scan_matcher_options() {
  
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  
  ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
}

// .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
bool LocalTrajectoryBuilderOptions::has_motion_filter_options() const {
  return this != internal_default_instance() && motion_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) delete motion_filter_options_;
  motion_filter_options_ = NULL;
}
const ::cartographer::mapping::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions::motion_filter_options() const {
  const ::cartographer::mapping::proto::MotionFilterOptions* p = motion_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::MotionFilterOptions*>(
      &::cartographer::mapping::proto::_MotionFilterOptions_default_instance_);
}
::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::mutable_motion_filter_options() {
  
  if (motion_filter_options_ == NULL) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  return motion_filter_options_;
}
::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::release_motion_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  
  ::cartographer::mapping::proto::MotionFilterOptions* temp = motion_filter_options_;
  motion_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_motion_filter_options(::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options) {
  delete motion_filter_options_;
  motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
}

// double imu_gravity_time_constant = 17;
void LocalTrajectoryBuilderOptions::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
}
double LocalTrajectoryBuilderOptions::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
void LocalTrajectoryBuilderOptions::set_imu_gravity_time_constant(double value) {
  
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.imu_gravity_time_constant)
}

// .cartographer.mapping_2d.proto.SubmapsOptions submaps_options = 11;
bool LocalTrajectoryBuilderOptions::has_submaps_options() const {
  return this != internal_default_instance() && submaps_options_ != NULL;
}
void LocalTrajectoryBuilderOptions::clear_submaps_options() {
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) delete submaps_options_;
  submaps_options_ = NULL;
}
const ::cartographer::mapping_2d::proto::SubmapsOptions& LocalTrajectoryBuilderOptions::submaps_options() const {
  const ::cartographer::mapping_2d::proto::SubmapsOptions* p = submaps_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::proto::SubmapsOptions*>(
      &::cartographer::mapping_2d::proto::_SubmapsOptions_default_instance_);
}
::cartographer::mapping_2d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::mutable_submaps_options() {
  
  if (submaps_options_ == NULL) {
    submaps_options_ = new ::cartographer::mapping_2d::proto::SubmapsOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  return submaps_options_;
}
::cartographer::mapping_2d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::release_submaps_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  
  ::cartographer::mapping_2d::proto::SubmapsOptions* temp = submaps_options_;
  submaps_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_submaps_options(::cartographer::mapping_2d::proto::SubmapsOptions* submaps_options) {
  delete submaps_options_;
  submaps_options_ = submaps_options;
  if (submaps_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.submaps_options)
}

// bool use_imu_data = 12;
void LocalTrajectoryBuilderOptions::clear_use_imu_data() {
  use_imu_data_ = false;
}
bool LocalTrajectoryBuilderOptions::use_imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.use_imu_data)
  return use_imu_data_;
}
void LocalTrajectoryBuilderOptions::set_use_imu_data(bool value) {
  
  use_imu_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions.use_imu_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
