// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/probability_grid.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_2d/proto/probability_grid.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_2d {
namespace proto {
class ProbabilityGrid_CellBoxDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProbabilityGrid_CellBox>
     _instance;
} _ProbabilityGrid_CellBox_default_instance_;
class ProbabilityGridDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProbabilityGrid>
     _instance;
} _ProbabilityGrid_default_instance_;

namespace protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid_CellBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid_CellBox, max_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid_CellBox, max_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid_CellBox, min_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid_CellBox, min_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid, limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid, cells_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilityGrid, known_cells_box_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ProbabilityGrid_CellBox)},
  { 9, -1, sizeof(ProbabilityGrid)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProbabilityGrid_CellBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProbabilityGrid_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping_2d/proto/probability_grid.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto::InitDefaults();
  _ProbabilityGrid_CellBox_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProbabilityGrid_CellBox_default_instance_);_ProbabilityGrid_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProbabilityGrid_default_instance_);_ProbabilityGrid_default_instance_._instance.get_mutable()->limits_ = const_cast< ::cartographer::mapping_2d::proto::MapLimits*>(
      ::cartographer::mapping_2d::proto::MapLimits::internal_default_instance());
  _ProbabilityGrid_default_instance_._instance.get_mutable()->known_cells_box_ = const_cast< ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox*>(
      ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4cartographer/mapping_2d/proto/probabil"
      "ity_grid.proto\022\035cartographer.mapping_2d."
      "proto\032.cartographer/mapping_2d/proto/map"
      "_limits.proto\"\362\001\n\017ProbabilityGrid\0228\n\006lim"
      "its\030\001 \001(\0132(.cartographer.mapping_2d.prot"
      "o.MapLimits\022\r\n\005cells\030\002 \003(\005\022O\n\017known_cell"
      "s_box\030\010 \001(\01326.cartographer.mapping_2d.pr"
      "oto.ProbabilityGrid.CellBox\032E\n\007CellBox\022\r"
      "\n\005max_x\030\001 \001(\005\022\r\n\005max_y\030\002 \001(\005\022\r\n\005min_x\030\003 "
      "\001(\005\022\r\n\005min_y\030\004 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_2d/proto/probability_grid.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2fmap_5flimits_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbabilityGrid_CellBox::kMaxXFieldNumber;
const int ProbabilityGrid_CellBox::kMaxYFieldNumber;
const int ProbabilityGrid_CellBox::kMinXFieldNumber;
const int ProbabilityGrid_CellBox::kMinYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbabilityGrid_CellBox::ProbabilityGrid_CellBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
}
ProbabilityGrid_CellBox::ProbabilityGrid_CellBox(const ProbabilityGrid_CellBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_x_, &from.max_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_y_) -
    reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
}

void ProbabilityGrid_CellBox::SharedCtor() {
  ::memset(&max_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_y_) -
      reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  _cached_size_ = 0;
}

ProbabilityGrid_CellBox::~ProbabilityGrid_CellBox() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  SharedDtor();
}

void ProbabilityGrid_CellBox::SharedDtor() {
}

void ProbabilityGrid_CellBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbabilityGrid_CellBox::descriptor() {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProbabilityGrid_CellBox& ProbabilityGrid_CellBox::default_instance() {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProbabilityGrid_CellBox* ProbabilityGrid_CellBox::New(::google::protobuf::Arena* arena) const {
  ProbabilityGrid_CellBox* n = new ProbabilityGrid_CellBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbabilityGrid_CellBox::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_y_) -
      reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  _internal_metadata_.Clear();
}

bool ProbabilityGrid_CellBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  return false;
#undef DO_
}

void ProbabilityGrid_CellBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_x(), output);
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_y(), output);
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_x(), output);
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
}

::google::protobuf::uint8* ProbabilityGrid_CellBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_x(), target);
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_y(), target);
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_x(), target);
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  return target;
}

size_t ProbabilityGrid_CellBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 max_x = 1;
  if (this->max_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_x());
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_y());
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_x());
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbabilityGrid_CellBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbabilityGrid_CellBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbabilityGrid_CellBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
    MergeFrom(*source);
  }
}

void ProbabilityGrid_CellBox::MergeFrom(const ProbabilityGrid_CellBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_x() != 0) {
    set_max_x(from.max_x());
  }
  if (from.max_y() != 0) {
    set_max_y(from.max_y());
  }
  if (from.min_x() != 0) {
    set_min_x(from.min_x());
  }
  if (from.min_y() != 0) {
    set_min_y(from.min_y());
  }
}

void ProbabilityGrid_CellBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbabilityGrid_CellBox::CopyFrom(const ProbabilityGrid_CellBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbabilityGrid_CellBox::IsInitialized() const {
  return true;
}

void ProbabilityGrid_CellBox::Swap(ProbabilityGrid_CellBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbabilityGrid_CellBox::InternalSwap(ProbabilityGrid_CellBox* other) {
  using std::swap;
  swap(max_x_, other->max_x_);
  swap(max_y_, other->max_y_);
  swap(min_x_, other->min_x_);
  swap(min_y_, other->min_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbabilityGrid_CellBox::GetMetadata() const {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbabilityGrid_CellBox

// int32 max_x = 1;
void ProbabilityGrid_CellBox::clear_max_x() {
  max_x_ = 0;
}
::google::protobuf::int32 ProbabilityGrid_CellBox::max_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.max_x)
  return max_x_;
}
void ProbabilityGrid_CellBox::set_max_x(::google::protobuf::int32 value) {
  
  max_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.max_x)
}

// int32 max_y = 2;
void ProbabilityGrid_CellBox::clear_max_y() {
  max_y_ = 0;
}
::google::protobuf::int32 ProbabilityGrid_CellBox::max_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.max_y)
  return max_y_;
}
void ProbabilityGrid_CellBox::set_max_y(::google::protobuf::int32 value) {
  
  max_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.max_y)
}

// int32 min_x = 3;
void ProbabilityGrid_CellBox::clear_min_x() {
  min_x_ = 0;
}
::google::protobuf::int32 ProbabilityGrid_CellBox::min_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.min_x)
  return min_x_;
}
void ProbabilityGrid_CellBox::set_min_x(::google::protobuf::int32 value) {
  
  min_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.min_x)
}

// int32 min_y = 4;
void ProbabilityGrid_CellBox::clear_min_y() {
  min_y_ = 0;
}
::google::protobuf::int32 ProbabilityGrid_CellBox::min_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.min_y)
  return min_y_;
}
void ProbabilityGrid_CellBox::set_min_y(::google::protobuf::int32 value) {
  
  min_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.CellBox.min_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbabilityGrid::kLimitsFieldNumber;
const int ProbabilityGrid::kCellsFieldNumber;
const int ProbabilityGrid::kKnownCellsBoxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbabilityGrid::ProbabilityGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_2d.proto.ProbabilityGrid)
}
ProbabilityGrid::ProbabilityGrid(const ProbabilityGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cells_(from.cells_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limits()) {
    limits_ = new ::cartographer::mapping_2d::proto::MapLimits(*from.limits_);
  } else {
    limits_ = NULL;
  }
  if (from.has_known_cells_box()) {
    known_cells_box_ = new ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox(*from.known_cells_box_);
  } else {
    known_cells_box_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_2d.proto.ProbabilityGrid)
}

void ProbabilityGrid::SharedCtor() {
  ::memset(&limits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&known_cells_box_) -
      reinterpret_cast<char*>(&limits_)) + sizeof(known_cells_box_));
  _cached_size_ = 0;
}

ProbabilityGrid::~ProbabilityGrid() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_2d.proto.ProbabilityGrid)
  SharedDtor();
}

void ProbabilityGrid::SharedDtor() {
  if (this != internal_default_instance()) delete limits_;
  if (this != internal_default_instance()) delete known_cells_box_;
}

void ProbabilityGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbabilityGrid::descriptor() {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProbabilityGrid& ProbabilityGrid::default_instance() {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProbabilityGrid* ProbabilityGrid::New(::google::protobuf::Arena* arena) const {
  ProbabilityGrid* n = new ProbabilityGrid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbabilityGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) {
    delete limits_;
  }
  limits_ = NULL;
  if (GetArenaNoVirtual() == NULL && known_cells_box_ != NULL) {
    delete known_cells_box_;
  }
  known_cells_box_ = NULL;
  _internal_metadata_.Clear();
}

bool ProbabilityGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping_2d.proto.MapLimits limits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cells = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cells())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_cells())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping_2d.proto.ProbabilityGrid.CellBox known_cells_box = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_known_cells_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_2d.proto.ProbabilityGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_2d.proto.ProbabilityGrid)
  return false;
#undef DO_
}

void ProbabilityGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping_2d.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->limits_, output);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cells_cached_byte_size_));
  }
  for (int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cells(i), output);
  }

  // .cartographer.mapping_2d.proto.ProbabilityGrid.CellBox known_cells_box = 8;
  if (this->has_known_cells_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->known_cells_box_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_2d.proto.ProbabilityGrid)
}

::google::protobuf::uint8* ProbabilityGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping_2d.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->limits_, deterministic, target);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _cells_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cells_, target);
  }

  // .cartographer.mapping_2d.proto.ProbabilityGrid.CellBox known_cells_box = 8;
  if (this->has_known_cells_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->known_cells_box_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_2d.proto.ProbabilityGrid)
  return target;
}

size_t ProbabilityGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 cells = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cells_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cells_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .cartographer.mapping_2d.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->limits_);
  }

  // .cartographer.mapping_2d.proto.ProbabilityGrid.CellBox known_cells_box = 8;
  if (this->has_known_cells_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->known_cells_box_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbabilityGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbabilityGrid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbabilityGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping_2d.proto.ProbabilityGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping_2d.proto.ProbabilityGrid)
    MergeFrom(*source);
  }
}

void ProbabilityGrid::MergeFrom(const ProbabilityGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (from.has_limits()) {
    mutable_limits()->::cartographer::mapping_2d::proto::MapLimits::MergeFrom(from.limits());
  }
  if (from.has_known_cells_box()) {
    mutable_known_cells_box()->::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox::MergeFrom(from.known_cells_box());
  }
}

void ProbabilityGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbabilityGrid::CopyFrom(const ProbabilityGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping_2d.proto.ProbabilityGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbabilityGrid::IsInitialized() const {
  return true;
}

void ProbabilityGrid::Swap(ProbabilityGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbabilityGrid::InternalSwap(ProbabilityGrid* other) {
  using std::swap;
  cells_.InternalSwap(&other->cells_);
  swap(limits_, other->limits_);
  swap(known_cells_box_, other->known_cells_box_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbabilityGrid::GetMetadata() const {
  protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbabilityGrid

// .cartographer.mapping_2d.proto.MapLimits limits = 1;
bool ProbabilityGrid::has_limits() const {
  return this != internal_default_instance() && limits_ != NULL;
}
void ProbabilityGrid::clear_limits() {
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) delete limits_;
  limits_ = NULL;
}
const ::cartographer::mapping_2d::proto::MapLimits& ProbabilityGrid::limits() const {
  const ::cartographer::mapping_2d::proto::MapLimits* p = limits_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::proto::MapLimits*>(
      &::cartographer::mapping_2d::proto::_MapLimits_default_instance_);
}
::cartographer::mapping_2d::proto::MapLimits* ProbabilityGrid::mutable_limits() {
  
  if (limits_ == NULL) {
    limits_ = new ::cartographer::mapping_2d::proto::MapLimits;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
  return limits_;
}
::cartographer::mapping_2d::proto::MapLimits* ProbabilityGrid::release_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
  
  ::cartographer::mapping_2d::proto::MapLimits* temp = limits_;
  limits_ = NULL;
  return temp;
}
void ProbabilityGrid::set_allocated_limits(::cartographer::mapping_2d::proto::MapLimits* limits) {
  delete limits_;
  limits_ = limits;
  if (limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
}

// repeated int32 cells = 2;
int ProbabilityGrid::cells_size() const {
  return cells_.size();
}
void ProbabilityGrid::clear_cells() {
  cells_.Clear();
}
::google::protobuf::int32 ProbabilityGrid::cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
  return cells_.Get(index);
}
void ProbabilityGrid::set_cells(int index, ::google::protobuf::int32 value) {
  cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
}
void ProbabilityGrid::add_cells(::google::protobuf::int32 value) {
  cells_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProbabilityGrid::cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
  return cells_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProbabilityGrid::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
  return &cells_;
}

// .cartographer.mapping_2d.proto.ProbabilityGrid.CellBox known_cells_box = 8;
bool ProbabilityGrid::has_known_cells_box() const {
  return this != internal_default_instance() && known_cells_box_ != NULL;
}
void ProbabilityGrid::clear_known_cells_box() {
  if (GetArenaNoVirtual() == NULL && known_cells_box_ != NULL) delete known_cells_box_;
  known_cells_box_ = NULL;
}
const ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox& ProbabilityGrid::known_cells_box() const {
  const ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox* p = known_cells_box_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.known_cells_box)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox*>(
      &::cartographer::mapping_2d::proto::_ProbabilityGrid_CellBox_default_instance_);
}
::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox* ProbabilityGrid::mutable_known_cells_box() {
  
  if (known_cells_box_ == NULL) {
    known_cells_box_ = new ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.ProbabilityGrid.known_cells_box)
  return known_cells_box_;
}
::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox* ProbabilityGrid::release_known_cells_box() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.ProbabilityGrid.known_cells_box)
  
  ::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox* temp = known_cells_box_;
  known_cells_box_ = NULL;
  return temp;
}
void ProbabilityGrid::set_allocated_known_cells_box(::cartographer::mapping_2d::proto::ProbabilityGrid_CellBox* known_cells_box) {
  delete known_cells_box_;
  known_cells_box_ = known_cells_box;
  if (known_cells_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.ProbabilityGrid.known_cells_box)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
