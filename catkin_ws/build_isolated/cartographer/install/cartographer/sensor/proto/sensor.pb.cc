// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {
class CompressedPointCloudDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompressedPointCloud>
     _instance;
} _CompressedPointCloud_default_instance_;
class ImuDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImuData>
     _instance;
} _ImuData_default_instance_;
class OdometryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OdometryData>
     _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixedFramePoseData>
     _instance;
} _FixedFramePoseData_default_instance_;
class LandmarkData_LandmarkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LandmarkData_Landmark>
     _instance;
} _LandmarkData_Landmark_default_instance_;
class LandmarkDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LandmarkData>
     _instance;
} _LandmarkData_default_instance_;

namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, num_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, point_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, angular_velocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_Landmark, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_Landmark, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_Landmark, translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_Landmark, rotation_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, landmarks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CompressedPointCloud)},
  { 7, -1, sizeof(ImuData)},
  { 15, -1, sizeof(OdometryData)},
  { 22, -1, sizeof(FixedFramePoseData)},
  { 29, -1, sizeof(LandmarkData_Landmark)},
  { 38, -1, sizeof(LandmarkData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedPointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OdometryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixedFramePoseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandmarkData_Landmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandmarkData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/sensor/proto/sensor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _CompressedPointCloud_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompressedPointCloud_default_instance_);_ImuData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImuData_default_instance_);_OdometryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OdometryData_default_instance_);_FixedFramePoseData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixedFramePoseData_default_instance_);_LandmarkData_Landmark_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LandmarkData_Landmark_default_instance_);_LandmarkData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LandmarkData_default_instance_);_ImuData_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  _ImuData_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  _OdometryData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  _FixedFramePoseData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  _LandmarkData_Landmark_default_instance_._instance.get_mutable()->transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&cartographer/sensor/proto/sensor.proto"
      "\022\031cartographer.sensor.proto\032,cartographe"
      "r/transform/proto/transform.proto\">\n\024Com"
      "pressedPointCloud\022\022\n\nnum_points\030\001 \001(\005\022\022\n"
      "\npoint_data\030\003 \003(\005\"\243\001\n\007ImuData\022\021\n\ttimesta"
      "mp\030\001 \001(\003\022C\n\023linear_acceleration\030\002 \001(\0132&."
      "cartographer.transform.proto.Vector3d\022@\n"
      "\020angular_velocity\030\003 \001(\0132&.cartographer.t"
      "ransform.proto.Vector3d\"V\n\014OdometryData\022"
      "\021\n\ttimestamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%.carto"
      "grapher.transform.proto.Rigid3d\"\\\n\022Fixed"
      "FramePoseData\022\021\n\ttimestamp\030\001 \001(\003\0223\n\004pose"
      "\030\002 \001(\0132%.cartographer.transform.proto.Ri"
      "gid3d\"\356\001\n\014LandmarkData\022\021\n\ttimestamp\030\001 \001("
      "\003\022C\n\tlandmarks\030\002 \003(\01320.cartographer.sens"
      "or.proto.LandmarkData.Landmark\032\205\001\n\010Landm"
      "ark\022\n\n\002id\030\001 \001(\014\0228\n\ttransform\030\002 \001(\0132%.car"
      "tographer.transform.proto.Rigid3d\022\032\n\022tra"
      "nslation_weight\030\003 \001(\001\022\027\n\017rotation_weight"
      "\030\004 \001(\001B\010B\006Sensorb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/sensor.proto", &protobuf_RegisterTypes);
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedPointCloud)
}
CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_data_(from.point_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_points_ = from.num_points_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::SharedCtor() {
  num_points_ = 0;
  _cached_size_ = 0;
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
}

void CompressedPointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedPointCloud::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedPointCloud& CompressedPointCloud::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedPointCloud* CompressedPointCloud::New(::google::protobuf::Arena* arena) const {
  CompressedPointCloud* n = new CompressedPointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_.Clear();
  num_points_ = 0;
  _internal_metadata_.Clear();
}

bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.CompressedPointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 point_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_point_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.CompressedPointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.CompressedPointCloud)
  return false;
#undef DO_
}

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _point_data_cached_byte_size_));
  }
  for (int i = 0, n = this->point_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.CompressedPointCloud)
}

::google::protobuf::uint8* CompressedPointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _point_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

size_t CompressedPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 point_data = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->point_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedPointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedPointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedPointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedPointCloud)
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_.MergeFrom(from.point_data_);
  if (from.num_points() != 0) {
    set_num_points(from.num_points());
  }
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {
  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  using std::swap;
  point_data_.InternalSwap(&other->point_data_);
  swap(num_points_, other->num_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedPointCloud

// int32 num_points = 1;
void CompressedPointCloud::clear_num_points() {
  num_points_ = 0;
}
::google::protobuf::int32 CompressedPointCloud::num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.num_points)
  return num_points_;
}
void CompressedPointCloud::set_num_points(::google::protobuf::int32 value) {
  
  num_points_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.num_points)
}

// repeated int32 point_data = 3;
int CompressedPointCloud::point_data_size() const {
  return point_data_.size();
}
void CompressedPointCloud::clear_point_data() {
  point_data_.Clear();
}
::google::protobuf::int32 CompressedPointCloud::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_.Get(index);
}
void CompressedPointCloud::set_point_data(int index, ::google::protobuf::int32 value) {
  point_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
void CompressedPointCloud::add_point_data(::google::protobuf::int32 value) {
  point_data_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressedPointCloud::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressedPointCloud::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return &point_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTimestampFieldNumber;
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::SharedCtor() {
  ::memset(&linear_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&linear_acceleration_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuData& ImuData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImuData* ImuData::New(::google::protobuf::Arena* arena) const {
  ImuData* n = new ImuData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.ImuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_acceleration_, output);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angular_velocity_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_acceleration_, deterministic, target);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angular_velocity_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(from.angular_velocity());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuData

// int64 timestamp = 1;
void ImuData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ImuData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.timestamp)
  return timestamp_;
}
void ImuData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.ImuData.timestamp)
}

// .cartographer.transform.proto.Vector3d linear_acceleration = 2;
bool ImuData::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
void ImuData::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::cartographer::transform::proto::Vector3d& ImuData::linear_acceleration() const {
  const ::cartographer::transform::proto::Vector3d* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3d*>(
      &::cartographer::transform::proto::_Vector3d_default_instance_);
}
::cartographer::transform::proto::Vector3d* ImuData::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.linear_acceleration)
  return linear_acceleration_;
}
::cartographer::transform::proto::Vector3d* ImuData::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.linear_acceleration)
  
  ::cartographer::transform::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void ImuData::set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.linear_acceleration)
}

// .cartographer.transform.proto.Vector3d angular_velocity = 3;
bool ImuData::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
void ImuData::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::cartographer::transform::proto::Vector3d& ImuData::angular_velocity() const {
  const ::cartographer::transform::proto::Vector3d* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3d*>(
      &::cartographer::transform::proto::_Vector3d_default_instance_);
}
::cartographer::transform::proto::Vector3d* ImuData::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.angular_velocity)
  return angular_velocity_;
}
::cartographer::transform::proto::Vector3d* ImuData::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.angular_velocity)
  
  ::cartographer::transform::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void ImuData::set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.angular_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTimestampFieldNumber;
const int OdometryData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryData& OdometryData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// int64 timestamp = 1;
void OdometryData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OdometryData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.timestamp)
  return timestamp_;
}
void OdometryData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.OdometryData.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 2;
bool OdometryData::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void OdometryData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& OdometryData::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* OdometryData::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.OdometryData.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* OdometryData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.OdometryData.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void OdometryData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.OdometryData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTimestampFieldNumber;
const int FixedFramePoseData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedFramePoseData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedFramePoseData& FixedFramePoseData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixedFramePoseData* FixedFramePoseData::New(::google::protobuf::Arena* arena) const {
  FixedFramePoseData* n = new FixedFramePoseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.FixedFramePoseData)
  return false;
#undef DO_
}

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedFramePoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedFramePoseData

// int64 timestamp = 1;
void FixedFramePoseData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FixedFramePoseData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.timestamp)
  return timestamp_;
}
void FixedFramePoseData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.FixedFramePoseData.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 2;
bool FixedFramePoseData::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void FixedFramePoseData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& FixedFramePoseData::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* FixedFramePoseData::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.FixedFramePoseData.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* FixedFramePoseData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.FixedFramePoseData.pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void FixedFramePoseData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.FixedFramePoseData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData_Landmark::kIdFieldNumber;
const int LandmarkData_Landmark::kTransformFieldNumber;
const int LandmarkData_Landmark::kTranslationWeightFieldNumber;
const int LandmarkData_Landmark::kRotationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData_Landmark::LandmarkData_Landmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData.Landmark)
}
LandmarkData_Landmark::LandmarkData_Landmark(const LandmarkData_Landmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_transform()) {
    transform_ = new ::cartographer::transform::proto::Rigid3d(*from.transform_);
  } else {
    transform_ = NULL;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_weight_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData.Landmark)
}

void LandmarkData_Landmark::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(rotation_weight_));
  _cached_size_ = 0;
}

LandmarkData_Landmark::~LandmarkData_Landmark() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData.Landmark)
  SharedDtor();
}

void LandmarkData_Landmark::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transform_;
}

void LandmarkData_Landmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData_Landmark::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkData_Landmark& LandmarkData_Landmark::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandmarkData_Landmark* LandmarkData_Landmark::New(::google::protobuf::Arena* arena) const {
  LandmarkData_Landmark* n = new LandmarkData_Landmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData_Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  _internal_metadata_.Clear();
}

bool LandmarkData_Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData.Landmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d transform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double translation_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData.Landmark)
  return false;
#undef DO_
}

void LandmarkData_Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transform_, output);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->translation_weight(), output);
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rotation_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData.Landmark)
}

::google::protobuf::uint8* LandmarkData_Landmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->transform_, deterministic, target);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->translation_weight(), target);
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rotation_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData.Landmark)
  return target;
}

size_t LandmarkData_Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData.Landmark)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .cartographer.transform.proto.Rigid3d transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData_Landmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData_Landmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData_Landmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData.Landmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData.Landmark)
    MergeFrom(*source);
  }
}

void LandmarkData_Landmark::MergeFrom(const LandmarkData_Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_transform()) {
    mutable_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.transform());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
}

void LandmarkData_Landmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData_Landmark::CopyFrom(const LandmarkData_Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData_Landmark::IsInitialized() const {
  return true;
}

void LandmarkData_Landmark::Swap(LandmarkData_Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData_Landmark::InternalSwap(LandmarkData_Landmark* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(transform_, other->transform_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData_Landmark::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkData_Landmark

// bytes id = 1;
void LandmarkData_Landmark::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LandmarkData_Landmark::id() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.Landmark.id)
  return id_.GetNoArena();
}
void LandmarkData_Landmark::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.Landmark.id)
}
#if LANG_CXX11
void LandmarkData_Landmark::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.sensor.proto.LandmarkData.Landmark.id)
}
#endif
void LandmarkData_Landmark::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.sensor.proto.LandmarkData.Landmark.id)
}
void LandmarkData_Landmark::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.sensor.proto.LandmarkData.Landmark.id)
}
::std::string* LandmarkData_Landmark::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.Landmark.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LandmarkData_Landmark::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.Landmark.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LandmarkData_Landmark::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.Landmark.id)
}

// .cartographer.transform.proto.Rigid3d transform = 2;
bool LandmarkData_Landmark::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void LandmarkData_Landmark::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& LandmarkData_Landmark::transform() const {
  const ::cartographer::transform::proto::Rigid3d* p = transform_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.Landmark.transform)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* LandmarkData_Landmark::mutable_transform() {
  
  if (transform_ == NULL) {
    transform_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.Landmark.transform)
  return transform_;
}
::cartographer::transform::proto::Rigid3d* LandmarkData_Landmark::release_transform() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.Landmark.transform)
  
  ::cartographer::transform::proto::Rigid3d* temp = transform_;
  transform_ = NULL;
  return temp;
}
void LandmarkData_Landmark::set_allocated_transform(::cartographer::transform::proto::Rigid3d* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.Landmark.transform)
}

// double translation_weight = 3;
void LandmarkData_Landmark::clear_translation_weight() {
  translation_weight_ = 0;
}
double LandmarkData_Landmark::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.Landmark.translation_weight)
  return translation_weight_;
}
void LandmarkData_Landmark::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.Landmark.translation_weight)
}

// double rotation_weight = 4;
void LandmarkData_Landmark::clear_rotation_weight() {
  rotation_weight_ = 0;
}
double LandmarkData_Landmark::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.Landmark.rotation_weight)
  return rotation_weight_;
}
void LandmarkData_Landmark::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.Landmark.rotation_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData::kTimestampFieldNumber;
const int LandmarkData::kLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData::LandmarkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData)
}
LandmarkData::LandmarkData(const LandmarkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      landmarks_(from.landmarks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
}

void LandmarkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkData& LandmarkData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandmarkData* LandmarkData::New(::google::protobuf::Arena* arena) const {
  LandmarkData* n = new LandmarkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool LandmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.LandmarkData.Landmark landmarks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData)
  return false;
#undef DO_
}

void LandmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.Landmark landmarks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->landmarks(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData)
}

::google::protobuf::uint8* LandmarkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.Landmark landmarks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmarks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->landmarks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData)
  return target;
}

size_t LandmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.sensor.proto.LandmarkData.Landmark landmarks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->landmarks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmarks(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LandmarkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {
  return true;
}

void LandmarkData::Swap(LandmarkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData::InternalSwap(LandmarkData* other) {
  using std::swap;
  landmarks_.InternalSwap(&other->landmarks_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkData

// int64 timestamp = 1;
void LandmarkData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LandmarkData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.timestamp)
  return timestamp_;
}
void LandmarkData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.timestamp)
}

// repeated .cartographer.sensor.proto.LandmarkData.Landmark landmarks = 2;
int LandmarkData::landmarks_size() const {
  return landmarks_.size();
}
void LandmarkData::clear_landmarks() {
  landmarks_.Clear();
}
const ::cartographer::sensor::proto::LandmarkData_Landmark& LandmarkData::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.landmarks)
  return landmarks_.Get(index);
}
::cartographer::sensor::proto::LandmarkData_Landmark* LandmarkData::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.landmarks)
  return landmarks_.Mutable(index);
}
::cartographer::sensor::proto::LandmarkData_Landmark* LandmarkData::add_landmarks() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.LandmarkData.landmarks)
  return landmarks_.Add();
}
::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_Landmark >*
LandmarkData::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.LandmarkData.landmarks)
  return &landmarks_;
}
const ::google::protobuf::RepeatedPtrField< ::cartographer::sensor::proto::LandmarkData_Landmark >&
LandmarkData::landmarks() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.LandmarkData.landmarks)
  return landmarks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
