// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/submaps_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping_3d/proto/range_data_inserter_options.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping_3d {
namespace proto {
class SubmapsOptions;
class SubmapsOptionsDefaultTypeInternal;
extern SubmapsOptionsDefaultTypeInternal _SubmapsOptions_default_instance_;
}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

namespace cartographer {
namespace mapping_3d {
namespace proto {

namespace protobuf_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto

// ===================================================================

class SubmapsOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping_3d.proto.SubmapsOptions) */ {
 public:
  SubmapsOptions();
  virtual ~SubmapsOptions();

  SubmapsOptions(const SubmapsOptions& from);

  inline SubmapsOptions& operator=(const SubmapsOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubmapsOptions(SubmapsOptions&& from) noexcept
    : SubmapsOptions() {
    *this = ::std::move(from);
  }

  inline SubmapsOptions& operator=(SubmapsOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmapsOptions& default_instance();

  static inline const SubmapsOptions* internal_default_instance() {
    return reinterpret_cast<const SubmapsOptions*>(
               &_SubmapsOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SubmapsOptions* other);
  friend void swap(SubmapsOptions& a, SubmapsOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubmapsOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  SubmapsOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubmapsOptions& from);
  void MergeFrom(const SubmapsOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubmapsOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping_3d.proto.RangeDataInserterOptions range_data_inserter_options = 3;
  bool has_range_data_inserter_options() const;
  void clear_range_data_inserter_options();
  static const int kRangeDataInserterOptionsFieldNumber = 3;
  const ::cartographer::mapping_3d::proto::RangeDataInserterOptions& range_data_inserter_options() const;
  ::cartographer::mapping_3d::proto::RangeDataInserterOptions* mutable_range_data_inserter_options();
  ::cartographer::mapping_3d::proto::RangeDataInserterOptions* release_range_data_inserter_options();
  void set_allocated_range_data_inserter_options(::cartographer::mapping_3d::proto::RangeDataInserterOptions* range_data_inserter_options);

  // double high_resolution = 1;
  void clear_high_resolution();
  static const int kHighResolutionFieldNumber = 1;
  double high_resolution() const;
  void set_high_resolution(double value);

  // double high_resolution_max_range = 4;
  void clear_high_resolution_max_range();
  static const int kHighResolutionMaxRangeFieldNumber = 4;
  double high_resolution_max_range() const;
  void set_high_resolution_max_range(double value);

  // double low_resolution = 5;
  void clear_low_resolution();
  static const int kLowResolutionFieldNumber = 5;
  double low_resolution() const;
  void set_low_resolution(double value);

  // int32 num_range_data = 2;
  void clear_num_range_data();
  static const int kNumRangeDataFieldNumber = 2;
  ::google::protobuf::int32 num_range_data() const;
  void set_num_range_data(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_3d.proto.SubmapsOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping_3d::proto::RangeDataInserterOptions* range_data_inserter_options_;
  double high_resolution_;
  double high_resolution_max_range_;
  double low_resolution_;
  ::google::protobuf::int32 num_range_data_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmapsOptions

// double high_resolution = 1;
inline void SubmapsOptions::clear_high_resolution() {
  high_resolution_ = 0;
}
inline double SubmapsOptions::high_resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.SubmapsOptions.high_resolution)
  return high_resolution_;
}
inline void SubmapsOptions::set_high_resolution(double value) {
  
  high_resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.SubmapsOptions.high_resolution)
}

// double high_resolution_max_range = 4;
inline void SubmapsOptions::clear_high_resolution_max_range() {
  high_resolution_max_range_ = 0;
}
inline double SubmapsOptions::high_resolution_max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.SubmapsOptions.high_resolution_max_range)
  return high_resolution_max_range_;
}
inline void SubmapsOptions::set_high_resolution_max_range(double value) {
  
  high_resolution_max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.SubmapsOptions.high_resolution_max_range)
}

// double low_resolution = 5;
inline void SubmapsOptions::clear_low_resolution() {
  low_resolution_ = 0;
}
inline double SubmapsOptions::low_resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.SubmapsOptions.low_resolution)
  return low_resolution_;
}
inline void SubmapsOptions::set_low_resolution(double value) {
  
  low_resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.SubmapsOptions.low_resolution)
}

// int32 num_range_data = 2;
inline void SubmapsOptions::clear_num_range_data() {
  num_range_data_ = 0;
}
inline ::google::protobuf::int32 SubmapsOptions::num_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.SubmapsOptions.num_range_data)
  return num_range_data_;
}
inline void SubmapsOptions::set_num_range_data(::google::protobuf::int32 value) {
  
  num_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.SubmapsOptions.num_range_data)
}

// .cartographer.mapping_3d.proto.RangeDataInserterOptions range_data_inserter_options = 3;
inline bool SubmapsOptions::has_range_data_inserter_options() const {
  return this != internal_default_instance() && range_data_inserter_options_ != NULL;
}
inline void SubmapsOptions::clear_range_data_inserter_options() {
  if (GetArenaNoVirtual() == NULL && range_data_inserter_options_ != NULL) delete range_data_inserter_options_;
  range_data_inserter_options_ = NULL;
}
inline const ::cartographer::mapping_3d::proto::RangeDataInserterOptions& SubmapsOptions::range_data_inserter_options() const {
  const ::cartographer::mapping_3d::proto::RangeDataInserterOptions* p = range_data_inserter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.SubmapsOptions.range_data_inserter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::proto::RangeDataInserterOptions*>(
      &::cartographer::mapping_3d::proto::_RangeDataInserterOptions_default_instance_);
}
inline ::cartographer::mapping_3d::proto::RangeDataInserterOptions* SubmapsOptions::mutable_range_data_inserter_options() {
  
  if (range_data_inserter_options_ == NULL) {
    range_data_inserter_options_ = new ::cartographer::mapping_3d::proto::RangeDataInserterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.SubmapsOptions.range_data_inserter_options)
  return range_data_inserter_options_;
}
inline ::cartographer::mapping_3d::proto::RangeDataInserterOptions* SubmapsOptions::release_range_data_inserter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.SubmapsOptions.range_data_inserter_options)
  
  ::cartographer::mapping_3d::proto::RangeDataInserterOptions* temp = range_data_inserter_options_;
  range_data_inserter_options_ = NULL;
  return temp;
}
inline void SubmapsOptions::set_allocated_range_data_inserter_options(::cartographer::mapping_3d::proto::RangeDataInserterOptions* range_data_inserter_options) {
  delete range_data_inserter_options_;
  range_data_inserter_options_ = range_data_inserter_options;
  if (range_data_inserter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.SubmapsOptions.range_data_inserter_options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto__INCLUDED
