// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/local_trajectory_builder_options.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/motion_filter_options.pb.h"
#include "cartographer/sensor/proto/adaptive_voxel_filter_options.pb.h"
#include "cartographer/mapping_2d/scan_matching/proto/real_time_correlative_scan_matcher_options.pb.h"
#include "cartographer/mapping_3d/proto/submaps_options.pb.h"
#include "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping_3d {
namespace proto {
class LocalTrajectoryBuilderOptions;
class LocalTrajectoryBuilderOptionsDefaultTypeInternal;
extern LocalTrajectoryBuilderOptionsDefaultTypeInternal _LocalTrajectoryBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

namespace cartographer {
namespace mapping_3d {
namespace proto {

namespace protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto

// ===================================================================

class LocalTrajectoryBuilderOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions) */ {
 public:
  LocalTrajectoryBuilderOptions();
  virtual ~LocalTrajectoryBuilderOptions();

  LocalTrajectoryBuilderOptions(const LocalTrajectoryBuilderOptions& from);

  inline LocalTrajectoryBuilderOptions& operator=(const LocalTrajectoryBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalTrajectoryBuilderOptions(LocalTrajectoryBuilderOptions&& from) noexcept
    : LocalTrajectoryBuilderOptions() {
    *this = ::std::move(from);
  }

  inline LocalTrajectoryBuilderOptions& operator=(LocalTrajectoryBuilderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalTrajectoryBuilderOptions& default_instance();

  static inline const LocalTrajectoryBuilderOptions* internal_default_instance() {
    return reinterpret_cast<const LocalTrajectoryBuilderOptions*>(
               &_LocalTrajectoryBuilderOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocalTrajectoryBuilderOptions* other);
  friend void swap(LocalTrajectoryBuilderOptions& a, LocalTrajectoryBuilderOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalTrajectoryBuilderOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalTrajectoryBuilderOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalTrajectoryBuilderOptions& from);
  void MergeFrom(const LocalTrajectoryBuilderOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalTrajectoryBuilderOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  bool has_high_resolution_adaptive_voxel_filter_options() const;
  void clear_high_resolution_adaptive_voxel_filter_options();
  static const int kHighResolutionAdaptiveVoxelFilterOptionsFieldNumber = 5;
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& high_resolution_adaptive_voxel_filter_options() const;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_high_resolution_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_high_resolution_adaptive_voxel_filter_options();
  void set_allocated_high_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options);

  // .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
  bool has_ceres_scan_matcher_options() const;
  void clear_ceres_scan_matcher_options();
  static const int kCeresScanMatcherOptionsFieldNumber = 6;
  const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions& ceres_scan_matcher_options() const;
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* mutable_ceres_scan_matcher_options();
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* release_ceres_scan_matcher_options();
  void set_allocated_ceres_scan_matcher_options(::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options);

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  bool has_motion_filter_options() const;
  void clear_motion_filter_options();
  static const int kMotionFilterOptionsFieldNumber = 7;
  const ::cartographer::mapping::proto::MotionFilterOptions& motion_filter_options() const;
  ::cartographer::mapping::proto::MotionFilterOptions* mutable_motion_filter_options();
  ::cartographer::mapping::proto::MotionFilterOptions* release_motion_filter_options();
  void set_allocated_motion_filter_options(::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options);

  // .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
  bool has_submaps_options() const;
  void clear_submaps_options();
  static const int kSubmapsOptionsFieldNumber = 8;
  const ::cartographer::mapping_3d::proto::SubmapsOptions& submaps_options() const;
  ::cartographer::mapping_3d::proto::SubmapsOptions* mutable_submaps_options();
  ::cartographer::mapping_3d::proto::SubmapsOptions* release_submaps_options();
  void set_allocated_submaps_options(::cartographer::mapping_3d::proto::SubmapsOptions* submaps_options);

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  bool has_low_resolution_adaptive_voxel_filter_options() const;
  void clear_low_resolution_adaptive_voxel_filter_options();
  static const int kLowResolutionAdaptiveVoxelFilterOptionsFieldNumber = 12;
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& low_resolution_adaptive_voxel_filter_options() const;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* mutable_low_resolution_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* release_low_resolution_adaptive_voxel_filter_options();
  void set_allocated_low_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options);

  // .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  bool has_real_time_correlative_scan_matcher_options() const;
  void clear_real_time_correlative_scan_matcher_options();
  static const int kRealTimeCorrelativeScanMatcherOptionsFieldNumber = 14;
  const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options() const;
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* mutable_real_time_correlative_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* release_real_time_correlative_scan_matcher_options();
  void set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options);

  // float min_range = 1;
  void clear_min_range();
  static const int kMinRangeFieldNumber = 1;
  float min_range() const;
  void set_min_range(float value);

  // float max_range = 2;
  void clear_max_range();
  static const int kMaxRangeFieldNumber = 2;
  float max_range() const;
  void set_max_range(float value);

  // int32 num_accumulated_range_data = 3;
  void clear_num_accumulated_range_data();
  static const int kNumAccumulatedRangeDataFieldNumber = 3;
  ::google::protobuf::int32 num_accumulated_range_data() const;
  void set_num_accumulated_range_data(::google::protobuf::int32 value);

  // float voxel_filter_size = 4;
  void clear_voxel_filter_size();
  static const int kVoxelFilterSizeFieldNumber = 4;
  float voxel_filter_size() const;
  void set_voxel_filter_size(float value);

  // double imu_gravity_time_constant = 15;
  void clear_imu_gravity_time_constant();
  static const int kImuGravityTimeConstantFieldNumber = 15;
  double imu_gravity_time_constant() const;
  void set_imu_gravity_time_constant(double value);

  // bool use_online_correlative_scan_matching = 13;
  void clear_use_online_correlative_scan_matching();
  static const int kUseOnlineCorrelativeScanMatchingFieldNumber = 13;
  bool use_online_correlative_scan_matching() const;
  void set_use_online_correlative_scan_matching(bool value);

  // int32 rotational_histogram_size = 17;
  void clear_rotational_histogram_size();
  static const int kRotationalHistogramSizeFieldNumber = 17;
  ::google::protobuf::int32 rotational_histogram_size() const;
  void set_rotational_histogram_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options_;
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_;
  ::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options_;
  ::cartographer::mapping_3d::proto::SubmapsOptions* submaps_options_;
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options_;
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options_;
  float min_range_;
  float max_range_;
  ::google::protobuf::int32 num_accumulated_range_data_;
  float voxel_filter_size_;
  double imu_gravity_time_constant_;
  bool use_online_correlative_scan_matching_;
  ::google::protobuf::int32 rotational_histogram_size_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalTrajectoryBuilderOptions

// float min_range = 1;
inline void LocalTrajectoryBuilderOptions::clear_min_range() {
  min_range_ = 0;
}
inline float LocalTrajectoryBuilderOptions::min_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.min_range)
  return min_range_;
}
inline void LocalTrajectoryBuilderOptions::set_min_range(float value) {
  
  min_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.min_range)
}

// float max_range = 2;
inline void LocalTrajectoryBuilderOptions::clear_max_range() {
  max_range_ = 0;
}
inline float LocalTrajectoryBuilderOptions::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.max_range)
  return max_range_;
}
inline void LocalTrajectoryBuilderOptions::set_max_range(float value) {
  
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.max_range)
}

// int32 num_accumulated_range_data = 3;
inline void LocalTrajectoryBuilderOptions::clear_num_accumulated_range_data() {
  num_accumulated_range_data_ = 0;
}
inline ::google::protobuf::int32 LocalTrajectoryBuilderOptions::num_accumulated_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.num_accumulated_range_data)
  return num_accumulated_range_data_;
}
inline void LocalTrajectoryBuilderOptions::set_num_accumulated_range_data(::google::protobuf::int32 value) {
  
  num_accumulated_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.num_accumulated_range_data)
}

// float voxel_filter_size = 4;
inline void LocalTrajectoryBuilderOptions::clear_voxel_filter_size() {
  voxel_filter_size_ = 0;
}
inline float LocalTrajectoryBuilderOptions::voxel_filter_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.voxel_filter_size)
  return voxel_filter_size_;
}
inline void LocalTrajectoryBuilderOptions::set_voxel_filter_size(float value) {
  
  voxel_filter_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.voxel_filter_size)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
inline bool LocalTrajectoryBuilderOptions::has_high_resolution_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && high_resolution_adaptive_voxel_filter_options_ != NULL;
}
inline void LocalTrajectoryBuilderOptions::clear_high_resolution_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && high_resolution_adaptive_voxel_filter_options_ != NULL) delete high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = NULL;
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::high_resolution_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = high_resolution_adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_high_resolution_adaptive_voxel_filter_options() {
  
  if (high_resolution_adaptive_voxel_filter_options_ == NULL) {
    high_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
  return high_resolution_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_high_resolution_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_high_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options) {
  delete high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = high_resolution_adaptive_voxel_filter_options;
  if (high_resolution_adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
inline bool LocalTrajectoryBuilderOptions::has_low_resolution_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && low_resolution_adaptive_voxel_filter_options_ != NULL;
}
inline void LocalTrajectoryBuilderOptions::clear_low_resolution_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && low_resolution_adaptive_voxel_filter_options_ != NULL) delete low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = NULL;
}
inline const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::low_resolution_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = low_resolution_adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_low_resolution_adaptive_voxel_filter_options() {
  
  if (low_resolution_adaptive_voxel_filter_options_ == NULL) {
    low_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
  return low_resolution_adaptive_voxel_filter_options_;
}
inline ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_low_resolution_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
  
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_low_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options) {
  delete low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = low_resolution_adaptive_voxel_filter_options;
  if (low_resolution_adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
}

// bool use_online_correlative_scan_matching = 13;
inline void LocalTrajectoryBuilderOptions::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
}
inline bool LocalTrajectoryBuilderOptions::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
  return use_online_correlative_scan_matching_;
}
inline void LocalTrajectoryBuilderOptions::set_use_online_correlative_scan_matching(bool value) {
  
  use_online_correlative_scan_matching_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
}

// .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
inline bool LocalTrajectoryBuilderOptions::has_real_time_correlative_scan_matcher_options() const {
  return this != internal_default_instance() && real_time_correlative_scan_matcher_options_ != NULL;
}
inline void LocalTrajectoryBuilderOptions::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
}
inline const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions::real_time_correlative_scan_matcher_options() const {
  const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* p = real_time_correlative_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      &::cartographer::mapping_2d::scan_matching::proto::_RealTimeCorrelativeScanMatcherOptions_default_instance_);
}
inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_real_time_correlative_scan_matcher_options() {
  
  if (real_time_correlative_scan_matcher_options_ == NULL) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_;
}
inline ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::release_real_time_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
}

// .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
inline bool LocalTrajectoryBuilderOptions::has_ceres_scan_matcher_options() const {
  return this != internal_default_instance() && ceres_scan_matcher_options_ != NULL;
}
inline void LocalTrajectoryBuilderOptions::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
}
inline const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions& LocalTrajectoryBuilderOptions::ceres_scan_matcher_options() const {
  const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* p = ceres_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions*>(
      &::cartographer::mapping_3d::scan_matching::proto::_CeresScanMatcherOptions_default_instance_);
}
inline ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_ceres_scan_matcher_options() {
  
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
inline ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
}

// .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
inline bool LocalTrajectoryBuilderOptions::has_motion_filter_options() const {
  return this != internal_default_instance() && motion_filter_options_ != NULL;
}
inline void LocalTrajectoryBuilderOptions::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) delete motion_filter_options_;
  motion_filter_options_ = NULL;
}
inline const ::cartographer::mapping::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions::motion_filter_options() const {
  const ::cartographer::mapping::proto::MotionFilterOptions* p = motion_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::MotionFilterOptions*>(
      &::cartographer::mapping::proto::_MotionFilterOptions_default_instance_);
}
inline ::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::mutable_motion_filter_options() {
  
  if (motion_filter_options_ == NULL) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  return motion_filter_options_;
}
inline ::cartographer::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::release_motion_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  
  ::cartographer::mapping::proto::MotionFilterOptions* temp = motion_filter_options_;
  motion_filter_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_motion_filter_options(::cartographer::mapping::proto::MotionFilterOptions* motion_filter_options) {
  delete motion_filter_options_;
  motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
}

// double imu_gravity_time_constant = 15;
inline void LocalTrajectoryBuilderOptions::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
}
inline double LocalTrajectoryBuilderOptions::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
inline void LocalTrajectoryBuilderOptions::set_imu_gravity_time_constant(double value) {
  
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.imu_gravity_time_constant)
}

// int32 rotational_histogram_size = 17;
inline void LocalTrajectoryBuilderOptions::clear_rotational_histogram_size() {
  rotational_histogram_size_ = 0;
}
inline ::google::protobuf::int32 LocalTrajectoryBuilderOptions::rotational_histogram_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.rotational_histogram_size)
  return rotational_histogram_size_;
}
inline void LocalTrajectoryBuilderOptions::set_rotational_histogram_size(::google::protobuf::int32 value) {
  
  rotational_histogram_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.rotational_histogram_size)
}

// .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
inline bool LocalTrajectoryBuilderOptions::has_submaps_options() const {
  return this != internal_default_instance() && submaps_options_ != NULL;
}
inline void LocalTrajectoryBuilderOptions::clear_submaps_options() {
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) delete submaps_options_;
  submaps_options_ = NULL;
}
inline const ::cartographer::mapping_3d::proto::SubmapsOptions& LocalTrajectoryBuilderOptions::submaps_options() const {
  const ::cartographer::mapping_3d::proto::SubmapsOptions* p = submaps_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::proto::SubmapsOptions*>(
      &::cartographer::mapping_3d::proto::_SubmapsOptions_default_instance_);
}
inline ::cartographer::mapping_3d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::mutable_submaps_options() {
  
  if (submaps_options_ == NULL) {
    submaps_options_ = new ::cartographer::mapping_3d::proto::SubmapsOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  return submaps_options_;
}
inline ::cartographer::mapping_3d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::release_submaps_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  
  ::cartographer::mapping_3d::proto::SubmapsOptions* temp = submaps_options_;
  submaps_options_ = NULL;
  return temp;
}
inline void LocalTrajectoryBuilderOptions::set_allocated_submaps_options(::cartographer::mapping_3d::proto::SubmapsOptions* submaps_options) {
  delete submaps_options_;
  submaps_options_ = submaps_options;
  if (submaps_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto__INCLUDED
