// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace scan_matching {
namespace proto {
class CeresScanMatcherOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CeresScanMatcherOptions>
     _instance;
} _CeresScanMatcherOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, occupied_space_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, only_optimize_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CeresScanMatcherOptions, ceres_solver_options_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CeresScanMatcherOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CeresScanMatcherOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::common::proto::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::InitDefaults();
  _CeresScanMatcherOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CeresScanMatcherOptions_default_instance_);_CeresScanMatcherOptions_default_instance_._instance.get_mutable()->ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(
      ::cartographer::common::proto::CeresSolverOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nLcartographer/mapping_3d/scan_matching/"
      "proto/ceres_scan_matcher_options.proto\022+"
      "cartographer.mapping_3d.scan_matching.pr"
      "oto\0324cartographer/common/proto/ceres_sol"
      "ver_options.proto\"\325\001\n\027CeresScanMatcherOp"
      "tions\022\035\n\025occupied_space_weight\030\001 \003(\001\022\032\n\022"
      "translation_weight\030\002 \001(\001\022\027\n\017rotation_wei"
      "ght\030\003 \001(\001\022\031\n\021only_optimize_yaw\030\005 \001(\010\022K\n\024"
      "ceres_solver_options\030\006 \001(\0132-.cartographe"
      "r.common.proto.CeresSolverOptionsb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_3d/scan_matching/proto/ceres_scan_matcher_options.proto", &protobuf_RegisterTypes);
  ::cartographer::common::proto::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CeresScanMatcherOptions::kOccupiedSpaceWeightFieldNumber;
const int CeresScanMatcherOptions::kTranslationWeightFieldNumber;
const int CeresScanMatcherOptions::kRotationWeightFieldNumber;
const int CeresScanMatcherOptions::kOnlyOptimizeYawFieldNumber;
const int CeresScanMatcherOptions::kCeresSolverOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CeresScanMatcherOptions::CeresScanMatcherOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
}
CeresScanMatcherOptions::CeresScanMatcherOptions(const CeresScanMatcherOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      occupied_space_weight_(from.occupied_space_weight_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ceres_solver_options()) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from.ceres_solver_options_);
  } else {
    ceres_solver_options_ = NULL;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_optimize_yaw_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(only_optimize_yaw_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
}

void CeresScanMatcherOptions::SharedCtor() {
  ::memset(&ceres_solver_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_optimize_yaw_) -
      reinterpret_cast<char*>(&ceres_solver_options_)) + sizeof(only_optimize_yaw_));
  _cached_size_ = 0;
}

CeresScanMatcherOptions::~CeresScanMatcherOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  SharedDtor();
}

void CeresScanMatcherOptions::SharedDtor() {
  if (this != internal_default_instance()) delete ceres_solver_options_;
}

void CeresScanMatcherOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CeresScanMatcherOptions::descriptor() {
  protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CeresScanMatcherOptions& CeresScanMatcherOptions::default_instance() {
  protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

CeresScanMatcherOptions* CeresScanMatcherOptions::New(::google::protobuf::Arena* arena) const {
  CeresScanMatcherOptions* n = new CeresScanMatcherOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CeresScanMatcherOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  occupied_space_weight_.Clear();
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = NULL;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&only_optimize_yaw_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(only_optimize_yaw_));
  _internal_metadata_.Clear();
}

bool CeresScanMatcherOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double occupied_space_weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_occupied_space_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_occupied_space_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double translation_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool only_optimize_yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_optimize_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_solver_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  return false;
#undef DO_
}

void CeresScanMatcherOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double occupied_space_weight = 1;
  if (this->occupied_space_weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _occupied_space_weight_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->occupied_space_weight().data(), this->occupied_space_weight_size(), output);
  }

  // double translation_weight = 2;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->translation_weight(), output);
  }

  // double rotation_weight = 3;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rotation_weight(), output);
  }

  // bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_optimize_yaw(), output);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ceres_solver_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
}

::google::protobuf::uint8* CeresScanMatcherOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double occupied_space_weight = 1;
  if (this->occupied_space_weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _occupied_space_weight_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->occupied_space_weight_, target);
  }

  // double translation_weight = 2;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->translation_weight(), target);
  }

  // double rotation_weight = 3;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rotation_weight(), target);
  }

  // bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->only_optimize_yaw(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ceres_solver_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  return target;
}

size_t CeresScanMatcherOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double occupied_space_weight = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->occupied_space_weight_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _occupied_space_weight_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
  if (this->has_ceres_solver_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ceres_solver_options_);
  }

  // double translation_weight = 2;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 3;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // bool only_optimize_yaw = 5;
  if (this->only_optimize_yaw() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CeresScanMatcherOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CeresScanMatcherOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CeresScanMatcherOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
    MergeFrom(*source);
  }
}

void CeresScanMatcherOptions::MergeFrom(const CeresScanMatcherOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  occupied_space_weight_.MergeFrom(from.occupied_space_weight_);
  if (from.has_ceres_solver_options()) {
    mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.ceres_solver_options());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
  if (from.only_optimize_yaw() != 0) {
    set_only_optimize_yaw(from.only_optimize_yaw());
  }
}

void CeresScanMatcherOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CeresScanMatcherOptions::CopyFrom(const CeresScanMatcherOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresScanMatcherOptions::IsInitialized() const {
  return true;
}

void CeresScanMatcherOptions::Swap(CeresScanMatcherOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CeresScanMatcherOptions::InternalSwap(CeresScanMatcherOptions* other) {
  using std::swap;
  occupied_space_weight_.InternalSwap(&other->occupied_space_weight_);
  swap(ceres_solver_options_, other->ceres_solver_options_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  swap(only_optimize_yaw_, other->only_optimize_yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CeresScanMatcherOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CeresScanMatcherOptions

// repeated double occupied_space_weight = 1;
int CeresScanMatcherOptions::occupied_space_weight_size() const {
  return occupied_space_weight_.size();
}
void CeresScanMatcherOptions::clear_occupied_space_weight() {
  occupied_space_weight_.Clear();
}
double CeresScanMatcherOptions::occupied_space_weight(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.occupied_space_weight)
  return occupied_space_weight_.Get(index);
}
void CeresScanMatcherOptions::set_occupied_space_weight(int index, double value) {
  occupied_space_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.occupied_space_weight)
}
void CeresScanMatcherOptions::add_occupied_space_weight(double value) {
  occupied_space_weight_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.occupied_space_weight)
}
const ::google::protobuf::RepeatedField< double >&
CeresScanMatcherOptions::occupied_space_weight() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.occupied_space_weight)
  return occupied_space_weight_;
}
::google::protobuf::RepeatedField< double >*
CeresScanMatcherOptions::mutable_occupied_space_weight() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.occupied_space_weight)
  return &occupied_space_weight_;
}

// double translation_weight = 2;
void CeresScanMatcherOptions::clear_translation_weight() {
  translation_weight_ = 0;
}
double CeresScanMatcherOptions::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.translation_weight)
  return translation_weight_;
}
void CeresScanMatcherOptions::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.translation_weight)
}

// double rotation_weight = 3;
void CeresScanMatcherOptions::clear_rotation_weight() {
  rotation_weight_ = 0;
}
double CeresScanMatcherOptions::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.rotation_weight)
  return rotation_weight_;
}
void CeresScanMatcherOptions::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.rotation_weight)
}

// bool only_optimize_yaw = 5;
void CeresScanMatcherOptions::clear_only_optimize_yaw() {
  only_optimize_yaw_ = false;
}
bool CeresScanMatcherOptions::only_optimize_yaw() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.only_optimize_yaw)
  return only_optimize_yaw_;
}
void CeresScanMatcherOptions::set_only_optimize_yaw(bool value) {
  
  only_optimize_yaw_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.only_optimize_yaw)
}

// .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 6;
bool CeresScanMatcherOptions::has_ceres_solver_options() const {
  return this != internal_default_instance() && ceres_solver_options_ != NULL;
}
void CeresScanMatcherOptions::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == NULL && ceres_solver_options_ != NULL) delete ceres_solver_options_;
  ceres_solver_options_ = NULL;
}
const ::cartographer::common::proto::CeresSolverOptions& CeresScanMatcherOptions::ceres_solver_options() const {
  const ::cartographer::common::proto::CeresSolverOptions* p = ceres_solver_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.ceres_solver_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::common::proto::CeresSolverOptions*>(
      &::cartographer::common::proto::_CeresSolverOptions_default_instance_);
}
::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions::mutable_ceres_solver_options() {
  
  if (ceres_solver_options_ == NULL) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.ceres_solver_options)
  return ceres_solver_options_;
}
::cartographer::common::proto::CeresSolverOptions* CeresScanMatcherOptions::release_ceres_solver_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.ceres_solver_options)
  
  ::cartographer::common::proto::CeresSolverOptions* temp = ceres_solver_options_;
  ceres_solver_options_ = NULL;
  return temp;
}
void CeresScanMatcherOptions::set_allocated_ceres_solver_options(::cartographer::common::proto::CeresSolverOptions* ceres_solver_options) {
  delete ceres_solver_options_;
  ceres_solver_options_ = ceres_solver_options;
  if (ceres_solver_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions.ceres_solver_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
