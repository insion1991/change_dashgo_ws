// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class SubmapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Submap>
     _instance;
} _Submap_default_instance_;
class NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Node>
     _instance;
} _Node_default_instance_;
class ImuDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImuData>
     _instance;
} _ImuData_default_instance_;
class OdometryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OdometryData>
     _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixedFramePoseData>
     _instance;
} _FixedFramePoseData_default_instance_;
class SerializedDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedData>
     _instance;
} _SerializedData_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_3d_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, imu_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, odometry_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, fixed_frame_pose_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, submap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, imu_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, odometry_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, fixed_frame_pose_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Submap)},
  { 8, -1, sizeof(Node)},
  { 15, -1, sizeof(ImuData)},
  { 22, -1, sizeof(OdometryData)},
  { 29, -1, sizeof(FixedFramePoseData)},
  { 36, -1, sizeof(SerializedData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Submap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OdometryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixedFramePoseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/serialization.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::InitDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::InitDefaults();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  _Submap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Submap_default_instance_);_Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Node_default_instance_);_ImuData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImuData_default_instance_);_OdometryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OdometryData_default_instance_);_FixedFramePoseData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixedFramePoseData_default_instance_);_SerializedData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedData_default_instance_);_Submap_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  _Submap_default_instance_._instance.get_mutable()->submap_2d_ = const_cast< ::cartographer::mapping::proto::Submap2D*>(
      ::cartographer::mapping::proto::Submap2D::internal_default_instance());
  _Submap_default_instance_._instance.get_mutable()->submap_3d_ = const_cast< ::cartographer::mapping::proto::Submap3D*>(
      ::cartographer::mapping::proto::Submap3D::internal_default_instance());
  _Node_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
  _Node_default_instance_._instance.get_mutable()->node_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryNodeData*>(
      ::cartographer::mapping::proto::TrajectoryNodeData::internal_default_instance());
  _ImuData_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::sensor::proto::ImuData*>(
      ::cartographer::sensor::proto::ImuData::internal_default_instance());
  _OdometryData_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::sensor::proto::OdometryData*>(
      ::cartographer::sensor::proto::OdometryData::internal_default_instance());
  _FixedFramePoseData_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::sensor::proto::FixedFramePoseData*>(
      ::cartographer::sensor::proto::FixedFramePoseData::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(
      ::cartographer::mapping::proto::Submap::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->node_ = const_cast< ::cartographer::mapping::proto::Node*>(
      ::cartographer::mapping::proto::Node::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(
      ::cartographer::mapping::proto::ImuData::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(
      ::cartographer::mapping::proto::OdometryData::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(
      ::cartographer::mapping::proto::FixedFramePoseData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.cartographer/mapping/proto/serializati"
      "on.proto\022\032cartographer.mapping.proto\032+ca"
      "rtographer/mapping/proto/pose_graph.prot"
      "o\032\'cartographer/mapping/proto/submap.pro"
      "to\0325cartographer/mapping/proto/trajector"
      "y_node_data.proto\032&cartographer/sensor/p"
      "roto/sensor.proto\"\263\001\n\006Submap\0227\n\tsubmap_i"
      "d\030\001 \001(\0132$.cartographer.mapping.proto.Sub"
      "mapId\0227\n\tsubmap_2d\030\002 \001(\0132$.cartographer."
      "mapping.proto.Submap2D\0227\n\tsubmap_3d\030\003 \001("
      "\0132$.cartographer.mapping.proto.Submap3D\""
      "~\n\004Node\0223\n\007node_id\030\001 \001(\0132\".cartographer."
      "mapping.proto.NodeId\022A\n\tnode_data\030\005 \001(\0132"
      "..cartographer.mapping.proto.TrajectoryN"
      "odeData\"V\n\007ImuData\022\025\n\rtrajectory_id\030\001 \001("
      "\005\0224\n\010imu_data\030\002 \001(\0132\".cartographer.senso"
      "r.proto.ImuData\"e\n\014OdometryData\022\025\n\rtraje"
      "ctory_id\030\001 \001(\005\022>\n\rodometry_data\030\002 \001(\0132\'."
      "cartographer.sensor.proto.OdometryData\"y"
      "\n\022FixedFramePoseData\022\025\n\rtrajectory_id\030\001 "
      "\001(\005\022L\n\025fixed_frame_pose_data\030\002 \001(\0132-.car"
      "tographer.sensor.proto.FixedFramePoseDat"
      "a\"\273\002\n\016SerializedData\0222\n\006submap\030\001 \001(\0132\".c"
      "artographer.mapping.proto.Submap\022.\n\004node"
      "\030\002 \001(\0132 .cartographer.mapping.proto.Node"
      "\0225\n\010imu_data\030\003 \001(\0132#.cartographer.mappin"
      "g.proto.ImuData\022\?\n\rodometry_data\030\004 \001(\0132("
      ".cartographer.mapping.proto.OdometryData"
      "\022M\n\025fixed_frame_pose_data\030\005 \001(\0132..cartog"
      "rapher.mapping.proto.FixedFramePoseDatab"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/serialization.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::AddDescriptors();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::AddDescriptors();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::AddDescriptors();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Submap::kSubmapIdFieldNumber;
const int Submap::kSubmap2DFieldNumber;
const int Submap::kSubmap3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Submap::Submap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Submap)
}
Submap::Submap(const Submap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = NULL;
  }
  if (from.has_submap_2d()) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D(*from.submap_2d_);
  } else {
    submap_2d_ = NULL;
  }
  if (from.has_submap_3d()) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D(*from.submap_3d_);
  } else {
    submap_3d_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap)
}

void Submap::SharedCtor() {
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_3d_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_3d_));
  _cached_size_ = 0;
}

Submap::~Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap)
  SharedDtor();
}

void Submap::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete submap_2d_;
  if (this != internal_default_instance()) delete submap_3d_;
}

void Submap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Submap& Submap::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Submap* Submap::New(::google::protobuf::Arena* arena) const {
  Submap* n = new Submap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) {
    delete submap_2d_;
  }
  submap_2d_ = NULL;
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) {
    delete submap_3d_;
  }
  submap_3d_ = NULL;
  _internal_metadata_.Clear();
}

bool Submap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Submap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Submap2D submap_2d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Submap3D submap_3d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Submap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Submap)
  return false;
#undef DO_
}

void Submap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_id_, output);
  }

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->submap_2d_, output);
  }

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->submap_3d_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Submap)
}

::google::protobuf::uint8* Submap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_id_, deterministic, target);
  }

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->submap_2d_, deterministic, target);
  }

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->submap_3d_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap)
  return target;
}

size_t Submap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_id_);
  }

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_2d_);
  }

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_3d_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  const Submap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Submap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Submap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Submap)
    MergeFrom(*source);
  }
}

void Submap::MergeFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_submap_2d()) {
    mutable_submap_2d()->::cartographer::mapping::proto::Submap2D::MergeFrom(from.submap_2d());
  }
  if (from.has_submap_3d()) {
    mutable_submap_3d()->::cartographer::mapping::proto::Submap3D::MergeFrom(from.submap_3d());
  }
}

void Submap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap::CopyFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap::IsInitialized() const {
  return true;
}

void Submap::Swap(Submap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Submap::InternalSwap(Submap* other) {
  using std::swap;
  swap(submap_id_, other->submap_id_);
  swap(submap_2d_, other->submap_2d_);
  swap(submap_3d_, other->submap_3d_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Submap::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Submap

// .cartographer.mapping.proto.SubmapId submap_id = 1;
bool Submap::has_submap_id() const {
  return this != internal_default_instance() && submap_id_ != NULL;
}
void Submap::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
const ::cartographer::mapping::proto::SubmapId& Submap::submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapId*>(
      &::cartographer::mapping::proto::_SubmapId_default_instance_);
}
::cartographer::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_;
}
::cartographer::mapping::proto::SubmapId* Submap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// .cartographer.mapping.proto.Submap2D submap_2d = 2;
bool Submap::has_submap_2d() const {
  return this != internal_default_instance() && submap_2d_ != NULL;
}
void Submap::clear_submap_2d() {
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
}
const ::cartographer::mapping::proto::Submap2D& Submap::submap_2d() const {
  const ::cartographer::mapping::proto::Submap2D* p = submap_2d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap2D*>(
      &::cartographer::mapping::proto::_Submap2D_default_instance_);
}
::cartographer::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_;
}
::cartographer::mapping::proto::Submap2D* Submap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  
  ::cartographer::mapping::proto::Submap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// .cartographer.mapping.proto.Submap3D submap_3d = 3;
bool Submap::has_submap_3d() const {
  return this != internal_default_instance() && submap_3d_ != NULL;
}
void Submap::clear_submap_3d() {
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}
const ::cartographer::mapping::proto::Submap3D& Submap::submap_3d() const {
  const ::cartographer::mapping::proto::Submap3D* p = submap_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap3D*>(
      &::cartographer::mapping::proto::_Submap3D_default_instance_);
}
::cartographer::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_;
}
::cartographer::mapping::proto::Submap3D* Submap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  
  ::cartographer::mapping::proto::Submap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNodeIdFieldNumber;
const int Node::kNodeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = NULL;
  }
  if (from.has_node_data()) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData(*from.node_data_);
  } else {
    node_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Node)
}

void Node::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_data_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(node_data_));
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete node_data_;
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) {
    delete node_data_;
  }
  node_data_ = NULL;
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.NodeId node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_id_, output);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->node_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_id_, deterministic, target);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->node_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.NodeId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_id_);
  }

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (this->has_node_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from.node_id());
  }
  if (from.has_node_data()) {
    mutable_node_data()->::cartographer::mapping::proto::TrajectoryNodeData::MergeFrom(from.node_data());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(node_data_, other->node_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// .cartographer.mapping.proto.NodeId node_id = 1;
bool Node::has_node_id() const {
  return this != internal_default_instance() && node_id_ != NULL;
}
void Node::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
}
const ::cartographer::mapping::proto::NodeId& Node::node_id() const {
  const ::cartographer::mapping::proto::NodeId* p = node_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::NodeId*>(
      &::cartographer::mapping::proto::_NodeId_default_instance_);
}
::cartographer::mapping::proto::NodeId* Node::mutable_node_id() {
  
  if (node_id_ == NULL) {
    node_id_ = new ::cartographer::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_id)
  return node_id_;
}
::cartographer::mapping::proto::NodeId* Node::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_id)
  
  ::cartographer::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
void Node::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_id)
}

// .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
bool Node::has_node_data() const {
  return this != internal_default_instance() && node_data_ != NULL;
}
void Node::clear_node_data() {
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}
const ::cartographer::mapping::proto::TrajectoryNodeData& Node::node_data() const {
  const ::cartographer::mapping::proto::TrajectoryNodeData* p = node_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryNodeData*>(
      &::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_);
}
::cartographer::mapping::proto::TrajectoryNodeData* Node::mutable_node_data() {
  
  if (node_data_ == NULL) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_data)
  return node_data_;
}
::cartographer::mapping::proto::TrajectoryNodeData* Node::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_data)
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
void Node::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTrajectoryIdFieldNumber;
const int ImuData::kImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_imu_data()) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = NULL;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.ImuData)
}

void ImuData::SharedCtor() {
  ::memset(&imu_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&imu_data_)) + sizeof(trajectory_id_));
  _cached_size_ = 0;
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete imu_data_;
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuData& ImuData::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImuData* ImuData::New(::google::protobuf::Arena* arena) const {
  ImuData* n = new ImuData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.ImuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.ImuData imu_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imu_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imu_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.ImuData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.sensor.proto.ImuData imu_data = 2;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::sensor::proto::ImuData::MergeFrom(from.imu_data());
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  swap(imu_data_, other->imu_data_);
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuData

// int32 trajectory_id = 1;
void ImuData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 ImuData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.trajectory_id)
  return trajectory_id_;
}
void ImuData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuData.trajectory_id)
}

// .cartographer.sensor.proto.ImuData imu_data = 2;
bool ImuData::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
void ImuData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
const ::cartographer::sensor::proto::ImuData& ImuData::imu_data() const {
  const ::cartographer::sensor::proto::ImuData* p = imu_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::ImuData*>(
      &::cartographer::sensor::proto::_ImuData_default_instance_);
}
::cartographer::sensor::proto::ImuData* ImuData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuData.imu_data)
  return imu_data_;
}
::cartographer::sensor::proto::ImuData* ImuData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuData.imu_data)
  
  ::cartographer::sensor::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
void ImuData::set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuData.imu_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTrajectoryIdFieldNumber;
const int OdometryData::kOdometryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_odometry_data()) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = NULL;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  ::memset(&odometry_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&odometry_data_)) + sizeof(trajectory_id_));
  _cached_size_ = 0;
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete odometry_data_;
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryData& OdometryData::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) {
    delete odometry_data_;
  }
  odometry_data_ = NULL;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.OdometryData odometry_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->odometry_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->odometry_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.OdometryData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->odometry_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::sensor::proto::OdometryData::MergeFrom(from.odometry_data());
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  swap(odometry_data_, other->odometry_data_);
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// int32 trajectory_id = 1;
void OdometryData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 OdometryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.trajectory_id)
  return trajectory_id_;
}
void OdometryData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.OdometryData.trajectory_id)
}

// .cartographer.sensor.proto.OdometryData odometry_data = 2;
bool OdometryData::has_odometry_data() const {
  return this != internal_default_instance() && odometry_data_ != NULL;
}
void OdometryData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
const ::cartographer::sensor::proto::OdometryData& OdometryData::odometry_data() const {
  const ::cartographer::sensor::proto::OdometryData* p = odometry_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.odometry_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::OdometryData*>(
      &::cartographer::sensor::proto::_OdometryData_default_instance_);
}
::cartographer::sensor::proto::OdometryData* OdometryData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.OdometryData.odometry_data)
  return odometry_data_;
}
::cartographer::sensor::proto::OdometryData* OdometryData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.OdometryData.odometry_data)
  
  ::cartographer::sensor::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
void OdometryData::set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.OdometryData.odometry_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTrajectoryIdFieldNumber;
const int FixedFramePoseData::kFixedFramePoseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = NULL;
  }
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  ::memset(&fixed_frame_pose_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&fixed_frame_pose_data_)) + sizeof(trajectory_id_));
  _cached_size_ = 0;
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedFramePoseData::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedFramePoseData& FixedFramePoseData::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixedFramePoseData* FixedFramePoseData::New(::google::protobuf::Arena* arena) const {
  FixedFramePoseData* n = new FixedFramePoseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = NULL;
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.FixedFramePoseData)
  return false;
#undef DO_
}

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fixed_frame_pose_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fixed_frame_pose_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.FixedFramePoseData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed_frame_pose_data_);
  }

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedFramePoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::sensor::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedFramePoseData

// int32 trajectory_id = 1;
void FixedFramePoseData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 FixedFramePoseData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
  return trajectory_id_;
}
void FixedFramePoseData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
}

// .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
bool FixedFramePoseData::has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && fixed_frame_pose_data_ != NULL;
}
void FixedFramePoseData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
const ::cartographer::sensor::proto::FixedFramePoseData& FixedFramePoseData::fixed_frame_pose_data() const {
  const ::cartographer::sensor::proto::FixedFramePoseData* p = fixed_frame_pose_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::FixedFramePoseData*>(
      &::cartographer::sensor::proto::_FixedFramePoseData_default_instance_);
}
::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  
  ::cartographer::sensor::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
void FixedFramePoseData::set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedData::kSubmapFieldNumber;
const int SerializedData::kNodeFieldNumber;
const int SerializedData::kImuDataFieldNumber;
const int SerializedData::kOdometryDataFieldNumber;
const int SerializedData::kFixedFramePoseDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedData::SerializedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SerializedData)
}
SerializedData::SerializedData(const SerializedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap()) {
    submap_ = new ::cartographer::mapping::proto::Submap(*from.submap_);
  } else {
    submap_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::cartographer::mapping::proto::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = NULL;
  }
  if (from.has_odometry_data()) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = NULL;
  }
  if (from.has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SerializedData)
}

void SerializedData::SharedCtor() {
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed_frame_pose_data_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(fixed_frame_pose_data_));
  _cached_size_ = 0;
}

SerializedData::~SerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SerializedData)
  SharedDtor();
}

void SerializedData::SharedDtor() {
  if (this != internal_default_instance()) delete submap_;
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete imu_data_;
  if (this != internal_default_instance()) delete odometry_data_;
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
}

void SerializedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedData::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedData& SerializedData::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedData* SerializedData::New(::google::protobuf::Arena* arena) const {
  SerializedData* n = new SerializedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_ != NULL) {
    delete submap_;
  }
  submap_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) {
    delete odometry_data_;
  }
  odometry_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = NULL;
  _internal_metadata_.Clear();
}

bool SerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SerializedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.Submap submap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SerializedData)
  return false;
#undef DO_
}

void SerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_, output);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_data_, output);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->odometry_data_, output);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fixed_frame_pose_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SerializedData)
}

::google::protobuf::uint8* SerializedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_, deterministic, target);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, deterministic, target);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->imu_data_, deterministic, target);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->odometry_data_, deterministic, target);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->fixed_frame_pose_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SerializedData)
  return target;
}

size_t SerializedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SerializedData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->imu_data_);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->odometry_data_);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fixed_frame_pose_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SerializedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SerializedData)
    MergeFrom(*source);
  }
}

void SerializedData::MergeFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap()) {
    mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from.submap());
  }
  if (from.has_node()) {
    mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from.imu_data());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from.odometry_data());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
}

void SerializedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedData::CopyFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedData::IsInitialized() const {
  return true;
}

void SerializedData::Swap(SerializedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedData::InternalSwap(SerializedData* other) {
  using std::swap;
  swap(submap_, other->submap_);
  swap(node_, other->node_);
  swap(imu_data_, other->imu_data_);
  swap(odometry_data_, other->odometry_data_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedData

// .cartographer.mapping.proto.Submap submap = 1;
bool SerializedData::has_submap() const {
  return this != internal_default_instance() && submap_ != NULL;
}
void SerializedData::clear_submap() {
  if (GetArenaNoVirtual() == NULL && submap_ != NULL) delete submap_;
  submap_ = NULL;
}
const ::cartographer::mapping::proto::Submap& SerializedData::submap() const {
  const ::cartographer::mapping::proto::Submap* p = submap_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap*>(
      &::cartographer::mapping::proto::_Submap_default_instance_);
}
::cartographer::mapping::proto::Submap* SerializedData::mutable_submap() {
  
  if (submap_ == NULL) {
    submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return submap_;
}
::cartographer::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
void SerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  delete submap_;
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}

// .cartographer.mapping.proto.Node node = 2;
bool SerializedData::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void SerializedData::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::cartographer::mapping::proto::Node& SerializedData::node() const {
  const ::cartographer::mapping::proto::Node* p = node_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.node)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Node*>(
      &::cartographer::mapping::proto::_Node_default_instance_);
}
::cartographer::mapping::proto::Node* SerializedData::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::cartographer::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.node)
  return node_;
}
::cartographer::mapping::proto::Node* SerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.node)
  
  ::cartographer::mapping::proto::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void SerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.node)
}

// .cartographer.mapping.proto.ImuData imu_data = 3;
bool SerializedData::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
void SerializedData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
const ::cartographer::mapping::proto::ImuData& SerializedData::imu_data() const {
  const ::cartographer::mapping::proto::ImuData* p = imu_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::ImuData*>(
      &::cartographer::mapping::proto::_ImuData_default_instance_);
}
::cartographer::mapping::proto::ImuData* SerializedData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.imu_data)
  return imu_data_;
}
::cartographer::mapping::proto::ImuData* SerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.imu_data)
  
  ::cartographer::mapping::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
void SerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.imu_data)
}

// .cartographer.mapping.proto.OdometryData odometry_data = 4;
bool SerializedData::has_odometry_data() const {
  return this != internal_default_instance() && odometry_data_ != NULL;
}
void SerializedData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
const ::cartographer::mapping::proto::OdometryData& SerializedData::odometry_data() const {
  const ::cartographer::mapping::proto::OdometryData* p = odometry_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.odometry_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::OdometryData*>(
      &::cartographer::mapping::proto::_OdometryData_default_instance_);
}
::cartographer::mapping::proto::OdometryData* SerializedData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.odometry_data)
  return odometry_data_;
}
::cartographer::mapping::proto::OdometryData* SerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.odometry_data)
  
  ::cartographer::mapping::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
void SerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.odometry_data)
}

// .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
bool SerializedData::has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && fixed_frame_pose_data_ != NULL;
}
void SerializedData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
const ::cartographer::mapping::proto::FixedFramePoseData& SerializedData::fixed_frame_pose_data() const {
  const ::cartographer::mapping::proto::FixedFramePoseData* p = fixed_frame_pose_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::FixedFramePoseData*>(
      &::cartographer::mapping::proto::_FixedFramePoseData_default_instance_);
}
::cartographer::mapping::proto::FixedFramePoseData* SerializedData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
::cartographer::mapping::proto::FixedFramePoseData* SerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  
  ::cartographer::mapping::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
void SerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
