// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class InitialTrajectoryPoseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InitialTrajectoryPose>
     _instance;
} _InitialTrajectoryPose_default_instance_;
class TrajectoryBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions>
     _instance;
} _TrajectoryBuilderOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, relative_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, to_trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_2d_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_3d_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pure_localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, initial_trajectory_pose_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(InitialTrajectoryPose)},
  { 8, -1, sizeof(TrajectoryBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitialTrajectoryPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryBuilderOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/trajectory_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  _InitialTrajectoryPose_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InitialTrajectoryPose_default_instance_);_TrajectoryBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrajectoryBuilderOptions_default_instance_);_InitialTrajectoryPose_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_2d_options_ = const_cast< ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions*>(
      ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_3d_options_ = const_cast< ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions*>(
      ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->initial_trajectory_pose_ = const_cast< ::cartographer::mapping::proto::InitialTrajectoryPose*>(
      ::cartographer::mapping::proto::InitialTrajectoryPose::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n;cartographer/mapping/proto/trajectory_"
      "builder_options.proto\022\032cartographer.mapp"
      "ing.proto\032,cartographer/transform/proto/"
      "transform.proto\032Dcartographer/mapping_2d"
      "/proto/local_trajectory_builder_options."
      "proto\032Dcartographer/mapping_3d/proto/loc"
      "al_trajectory_builder_options.proto\"\202\001\n\025"
      "InitialTrajectoryPose\022<\n\rrelative_pose\030\001"
      " \001(\0132%.cartographer.transform.proto.Rigi"
      "d3d\022\030\n\020to_trajectory_id\030\002 \001(\005\022\021\n\ttimesta"
      "mp\030\003 \001(\003\"\323\002\n\030TrajectoryBuilderOptions\022c\n"
      "\035trajectory_builder_2d_options\030\001 \001(\0132<.c"
      "artographer.mapping_2d.proto.LocalTrajec"
      "toryBuilderOptions\022c\n\035trajectory_builder"
      "_3d_options\030\002 \001(\0132<.cartographer.mapping"
      "_3d.proto.LocalTrajectoryBuilderOptions\022"
      "\031\n\021pure_localization\030\003 \001(\010\022R\n\027initial_tr"
      "ajectory_pose\030\004 \001(\01321.cartographer.mappi"
      "ng.proto.InitialTrajectoryPoseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_builder_options.proto", &protobuf_RegisterTypes);
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitialTrajectoryPose::kRelativePoseFieldNumber;
const int InitialTrajectoryPose::kToTrajectoryIdFieldNumber;
const int InitialTrajectoryPose::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitialTrajectoryPose::InitialTrajectoryPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}
InitialTrajectoryPose::InitialTrajectoryPose(const InitialTrajectoryPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_pose()) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_trajectory_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}

void InitialTrajectoryPose::SharedCtor() {
  ::memset(&relative_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&relative_pose_)) + sizeof(to_trajectory_id_));
  _cached_size_ = 0;
}

InitialTrajectoryPose::~InitialTrajectoryPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.InitialTrajectoryPose)
  SharedDtor();
}

void InitialTrajectoryPose::SharedDtor() {
  if (this != internal_default_instance()) delete relative_pose_;
}

void InitialTrajectoryPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialTrajectoryPose::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitialTrajectoryPose& InitialTrajectoryPose::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitialTrajectoryPose* InitialTrajectoryPose::New(::google::protobuf::Arena* arena) const {
  InitialTrajectoryPose* n = new InitialTrajectoryPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitialTrajectoryPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) {
    delete relative_pose_;
  }
  relative_pose_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  _internal_metadata_.Clear();
}

bool InitialTrajectoryPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.InitialTrajectoryPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d relative_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_trajectory_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.InitialTrajectoryPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.InitialTrajectoryPose)
  return false;
#undef DO_
}

void InitialTrajectoryPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->relative_pose_, output);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_trajectory_id(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.InitialTrajectoryPose)
}

::google::protobuf::uint8* InitialTrajectoryPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->relative_pose_, deterministic, target);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_trajectory_id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.InitialTrajectoryPose)
  return target;
}

size_t InitialTrajectoryPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.InitialTrajectoryPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relative_pose_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialTrajectoryPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialTrajectoryPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitialTrajectoryPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.InitialTrajectoryPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.InitialTrajectoryPose)
    MergeFrom(*source);
  }
}

void InitialTrajectoryPose::MergeFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relative_pose()) {
    mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.to_trajectory_id() != 0) {
    set_to_trajectory_id(from.to_trajectory_id());
  }
}

void InitialTrajectoryPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialTrajectoryPose::CopyFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialTrajectoryPose::IsInitialized() const {
  return true;
}

void InitialTrajectoryPose::Swap(InitialTrajectoryPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitialTrajectoryPose::InternalSwap(InitialTrajectoryPose* other) {
  using std::swap;
  swap(relative_pose_, other->relative_pose_);
  swap(timestamp_, other->timestamp_);
  swap(to_trajectory_id_, other->to_trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitialTrajectoryPose::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitialTrajectoryPose

// .cartographer.transform.proto.Rigid3d relative_pose = 1;
bool InitialTrajectoryPose::has_relative_pose() const {
  return this != internal_default_instance() && relative_pose_ != NULL;
}
void InitialTrajectoryPose::clear_relative_pose() {
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;
}
const ::cartographer::transform::proto::Rigid3d& InitialTrajectoryPose::relative_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = relative_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::mutable_relative_pose() {
  
  if (relative_pose_ == NULL) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return relative_pose_;
}
::cartographer::transform::proto::Rigid3d* InitialTrajectoryPose::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = NULL;
  return temp;
}
void InitialTrajectoryPose::set_allocated_relative_pose(::cartographer::transform::proto::Rigid3d* relative_pose) {
  delete relative_pose_;
  relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
}

// int32 to_trajectory_id = 2;
void InitialTrajectoryPose::clear_to_trajectory_id() {
  to_trajectory_id_ = 0;
}
::google::protobuf::int32 InitialTrajectoryPose::to_trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
  return to_trajectory_id_;
}
void InitialTrajectoryPose::set_to_trajectory_id(::google::protobuf::int32 value) {
  
  to_trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
}

// int64 timestamp = 3;
void InitialTrajectoryPose::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InitialTrajectoryPose::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
  return timestamp_;
}
void InitialTrajectoryPose::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions::kTrajectoryBuilder2DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kTrajectoryBuilder3DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationFieldNumber;
const int TrajectoryBuilderOptions::kInitialTrajectoryPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions::TrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}
TrajectoryBuilderOptions::TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_builder_2d_options()) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions(*from.trajectory_builder_2d_options_);
  } else {
    trajectory_builder_2d_options_ = NULL;
  }
  if (from.has_trajectory_builder_3d_options()) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions(*from.trajectory_builder_3d_options_);
  } else {
    trajectory_builder_3d_options_ = NULL;
  }
  if (from.has_initial_trajectory_pose()) {
    initial_trajectory_pose_ = new ::cartographer::mapping::proto::InitialTrajectoryPose(*from.initial_trajectory_pose_);
  } else {
    initial_trajectory_pose_ = NULL;
  }
  pure_localization_ = from.pure_localization_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::SharedCtor() {
  ::memset(&trajectory_builder_2d_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pure_localization_) -
      reinterpret_cast<char*>(&trajectory_builder_2d_options_)) + sizeof(pure_localization_));
  _cached_size_ = 0;
}

TrajectoryBuilderOptions::~TrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_2d_options_;
  if (this != internal_default_instance()) delete trajectory_builder_3d_options_;
  if (this != internal_default_instance()) delete initial_trajectory_pose_;
}

void TrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryBuilderOptions& TrajectoryBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryBuilderOptions* TrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptions* n = new TrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) {
    delete trajectory_builder_2d_options_;
  }
  trajectory_builder_2d_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) {
    delete trajectory_builder_3d_options_;
  }
  trajectory_builder_3d_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) {
    delete initial_trajectory_pose_;
  }
  initial_trajectory_pose_ = NULL;
  pure_localization_ = false;
  _internal_metadata_.Clear();
}

bool TrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_2d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_3d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pure_localization = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pure_localization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_trajectory_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return false;
#undef DO_
}

void TrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trajectory_builder_2d_options_, output);
  }

  // .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_builder_3d_options_, output);
  }

  // bool pure_localization = 3;
  if (this->pure_localization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pure_localization(), output);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->initial_trajectory_pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trajectory_builder_2d_options_, deterministic, target);
  }

  // .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_builder_3d_options_, deterministic, target);
  }

  // bool pure_localization = 3;
  if (this->pure_localization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pure_localization(), target);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->initial_trajectory_pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return target;
}

size_t TrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_2d_options_);
  }

  // .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_3d_options_);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_trajectory_pose_);
  }

  // bool pure_localization = 3;
  if (this->pure_localization() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions::MergeFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_builder_2d_options()) {
    mutable_trajectory_builder_2d_options()->::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_2d_options());
  }
  if (from.has_trajectory_builder_3d_options()) {
    mutable_trajectory_builder_3d_options()->::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_3d_options());
  }
  if (from.has_initial_trajectory_pose()) {
    mutable_initial_trajectory_pose()->::cartographer::mapping::proto::InitialTrajectoryPose::MergeFrom(from.initial_trajectory_pose());
  }
  if (from.pure_localization() != 0) {
    set_pure_localization(from.pure_localization());
  }
}

void TrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions::CopyFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions::Swap(TrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions::InternalSwap(TrajectoryBuilderOptions* other) {
  using std::swap;
  swap(trajectory_builder_2d_options_, other->trajectory_builder_2d_options_);
  swap(trajectory_builder_3d_options_, other->trajectory_builder_3d_options_);
  swap(initial_trajectory_pose_, other->initial_trajectory_pose_);
  swap(pure_localization_, other->pure_localization_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptions

// .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options() const {
  return this != internal_default_instance() && trajectory_builder_2d_options_ != NULL;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
}
const ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions& TrajectoryBuilderOptions::trajectory_builder_2d_options() const {
  const ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* p = trajectory_builder_2d_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions*>(
      &::cartographer::mapping_2d::proto::_LocalTrajectoryBuilderOptions_default_instance_);
}
::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options() {
  
  if (trajectory_builder_2d_options_ == NULL) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_;
}
::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::release_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  
  ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* temp = trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options(::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* trajectory_builder_2d_options) {
  delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = trajectory_builder_2d_options;
  if (trajectory_builder_2d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
}

// .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options() const {
  return this != internal_default_instance() && trajectory_builder_3d_options_ != NULL;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
}
const ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions& TrajectoryBuilderOptions::trajectory_builder_3d_options() const {
  const ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* p = trajectory_builder_3d_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions*>(
      &::cartographer::mapping_3d::proto::_LocalTrajectoryBuilderOptions_default_instance_);
}
::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options() {
  
  if (trajectory_builder_3d_options_ == NULL) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_;
}
::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::release_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  
  ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* temp = trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options(::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* trajectory_builder_3d_options) {
  delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = trajectory_builder_3d_options;
  if (trajectory_builder_3d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
}

// bool pure_localization = 3;
void TrajectoryBuilderOptions::clear_pure_localization() {
  pure_localization_ = false;
}
bool TrajectoryBuilderOptions::pure_localization() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
  return pure_localization_;
}
void TrajectoryBuilderOptions::set_pure_localization(bool value) {
  
  pure_localization_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
}

// .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
bool TrajectoryBuilderOptions::has_initial_trajectory_pose() const {
  return this != internal_default_instance() && initial_trajectory_pose_ != NULL;
}
void TrajectoryBuilderOptions::clear_initial_trajectory_pose() {
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) delete initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
}
const ::cartographer::mapping::proto::InitialTrajectoryPose& TrajectoryBuilderOptions::initial_trajectory_pose() const {
  const ::cartographer::mapping::proto::InitialTrajectoryPose* p = initial_trajectory_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::InitialTrajectoryPose*>(
      &::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_);
}
::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::mutable_initial_trajectory_pose() {
  
  if (initial_trajectory_pose_ == NULL) {
    initial_trajectory_pose_ = new ::cartographer::mapping::proto::InitialTrajectoryPose;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return initial_trajectory_pose_;
}
::cartographer::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::release_initial_trajectory_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  
  ::cartographer::mapping::proto::InitialTrajectoryPose* temp = initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_initial_trajectory_pose(::cartographer::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose) {
  delete initial_trajectory_pose_;
  initial_trajectory_pose_ = initial_trajectory_pose;
  if (initial_trajectory_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
