// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/pose_graph.pb.h"
#include "cartographer/mapping/proto/submap.pb.h"
#include "cartographer/mapping/proto/trajectory_node_data.pb.h"
#include "cartographer/sensor/proto/sensor.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class FixedFramePoseData;
class FixedFramePoseDataDefaultTypeInternal;
extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
class ImuData;
class ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class OdometryData;
class OdometryDataDefaultTypeInternal;
extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
class SerializedData;
class SerializedDataDefaultTypeInternal;
extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
class Submap;
class SubmapDefaultTypeInternal;
extern SubmapDefaultTypeInternal _Submap_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

namespace cartographer {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto

// ===================================================================

class Submap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Submap) */ {
 public:
  Submap();
  virtual ~Submap();

  Submap(const Submap& from);

  inline Submap& operator=(const Submap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Submap(Submap&& from) noexcept
    : Submap() {
    *this = ::std::move(from);
  }

  inline Submap& operator=(Submap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap& default_instance();

  static inline const Submap* internal_default_instance() {
    return reinterpret_cast<const Submap*>(
               &_Submap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Submap* other);
  friend void swap(Submap& a, Submap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Submap* New() const PROTOBUF_FINAL { return New(NULL); }

  Submap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Submap& from);
  void MergeFrom(const Submap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Submap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  void clear_submap_id();
  static const int kSubmapIdFieldNumber = 1;
  const ::cartographer::mapping::proto::SubmapId& submap_id() const;
  ::cartographer::mapping::proto::SubmapId* mutable_submap_id();
  ::cartographer::mapping::proto::SubmapId* release_submap_id();
  void set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id);

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  bool has_submap_2d() const;
  void clear_submap_2d();
  static const int kSubmap2DFieldNumber = 2;
  const ::cartographer::mapping::proto::Submap2D& submap_2d() const;
  ::cartographer::mapping::proto::Submap2D* mutable_submap_2d();
  ::cartographer::mapping::proto::Submap2D* release_submap_2d();
  void set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d);

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  bool has_submap_3d() const;
  void clear_submap_3d();
  static const int kSubmap3DFieldNumber = 3;
  const ::cartographer::mapping::proto::Submap3D& submap_3d() const;
  ::cartographer::mapping::proto::Submap3D* mutable_submap_3d();
  ::cartographer::mapping::proto::Submap3D* release_submap_3d();
  void set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::SubmapId* submap_id_;
  ::cartographer::mapping::proto::Submap2D* submap_2d_;
  ::cartographer::mapping::proto::Submap3D* submap_3d_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.NodeId node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::cartographer::mapping::proto::NodeId& node_id() const;
  ::cartographer::mapping::proto::NodeId* mutable_node_id();
  ::cartographer::mapping::proto::NodeId* release_node_id();
  void set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id);

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  bool has_node_data() const;
  void clear_node_data();
  static const int kNodeDataFieldNumber = 5;
  const ::cartographer::mapping::proto::TrajectoryNodeData& node_data() const;
  ::cartographer::mapping::proto::TrajectoryNodeData* mutable_node_data();
  ::cartographer::mapping::proto::TrajectoryNodeData* release_node_data();
  void set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::NodeId* node_id_;
  ::cartographer::mapping::proto::TrajectoryNodeData* node_data_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImuData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ImuData) */ {
 public:
  ImuData();
  virtual ~ImuData();

  ImuData(const ImuData& from);

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(ImuData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuData& default_instance();

  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ImuData* other);
  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImuData* New() const PROTOBUF_FINAL { return New(NULL); }

  ImuData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImuData& from);
  void MergeFrom(const ImuData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImuData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 2;
  const ::cartographer::sensor::proto::ImuData& imu_data() const;
  ::cartographer::sensor::proto::ImuData* mutable_imu_data();
  ::cartographer::sensor::proto::ImuData* release_imu_data();
  void set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ImuData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::sensor::proto::ImuData* imu_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OdometryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.OdometryData) */ {
 public:
  OdometryData();
  virtual ~OdometryData();

  OdometryData(const OdometryData& from);

  inline OdometryData& operator=(const OdometryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OdometryData(OdometryData&& from) noexcept
    : OdometryData() {
    *this = ::std::move(from);
  }

  inline OdometryData& operator=(OdometryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryData& default_instance();

  static inline const OdometryData* internal_default_instance() {
    return reinterpret_cast<const OdometryData*>(
               &_OdometryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(OdometryData* other);
  friend void swap(OdometryData& a, OdometryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OdometryData* New() const PROTOBUF_FINAL { return New(NULL); }

  OdometryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OdometryData& from);
  void MergeFrom(const OdometryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OdometryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  bool has_odometry_data() const;
  void clear_odometry_data();
  static const int kOdometryDataFieldNumber = 2;
  const ::cartographer::sensor::proto::OdometryData& odometry_data() const;
  ::cartographer::sensor::proto::OdometryData* mutable_odometry_data();
  ::cartographer::sensor::proto::OdometryData* release_odometry_data();
  void set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.OdometryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::sensor::proto::OdometryData* odometry_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FixedFramePoseData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.FixedFramePoseData) */ {
 public:
  FixedFramePoseData();
  virtual ~FixedFramePoseData();

  FixedFramePoseData(const FixedFramePoseData& from);

  inline FixedFramePoseData& operator=(const FixedFramePoseData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FixedFramePoseData(FixedFramePoseData&& from) noexcept
    : FixedFramePoseData() {
    *this = ::std::move(from);
  }

  inline FixedFramePoseData& operator=(FixedFramePoseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedFramePoseData& default_instance();

  static inline const FixedFramePoseData* internal_default_instance() {
    return reinterpret_cast<const FixedFramePoseData*>(
               &_FixedFramePoseData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FixedFramePoseData* other);
  friend void swap(FixedFramePoseData& a, FixedFramePoseData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FixedFramePoseData* New() const PROTOBUF_FINAL { return New(NULL); }

  FixedFramePoseData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FixedFramePoseData& from);
  void MergeFrom(const FixedFramePoseData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FixedFramePoseData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  bool has_fixed_frame_pose_data() const;
  void clear_fixed_frame_pose_data();
  static const int kFixedFramePoseDataFieldNumber = 2;
  const ::cartographer::sensor::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  ::cartographer::sensor::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  ::cartographer::sensor::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.FixedFramePoseData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SerializedData) */ {
 public:
  SerializedData();
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerializedData(SerializedData&& from) noexcept
    : SerializedData() {
    *this = ::std::move(from);
  }

  inline SerializedData& operator=(SerializedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedData& default_instance();

  static inline const SerializedData* internal_default_instance() {
    return reinterpret_cast<const SerializedData*>(
               &_SerializedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SerializedData* other);
  friend void swap(SerializedData& a, SerializedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializedData* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.Submap submap = 1;
  bool has_submap() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 1;
  const ::cartographer::mapping::proto::Submap& submap() const;
  ::cartographer::mapping::proto::Submap* mutable_submap();
  ::cartographer::mapping::proto::Submap* release_submap();
  void set_allocated_submap(::cartographer::mapping::proto::Submap* submap);

  // .cartographer.mapping.proto.Node node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::cartographer::mapping::proto::Node& node() const;
  ::cartographer::mapping::proto::Node* mutable_node();
  ::cartographer::mapping::proto::Node* release_node();
  void set_allocated_node(::cartographer::mapping::proto::Node* node);

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 3;
  const ::cartographer::mapping::proto::ImuData& imu_data() const;
  ::cartographer::mapping::proto::ImuData* mutable_imu_data();
  ::cartographer::mapping::proto::ImuData* release_imu_data();
  void set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data);

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  bool has_odometry_data() const;
  void clear_odometry_data();
  static const int kOdometryDataFieldNumber = 4;
  const ::cartographer::mapping::proto::OdometryData& odometry_data() const;
  ::cartographer::mapping::proto::OdometryData* mutable_odometry_data();
  ::cartographer::mapping::proto::OdometryData* release_odometry_data();
  void set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data);

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  bool has_fixed_frame_pose_data() const;
  void clear_fixed_frame_pose_data();
  static const int kFixedFramePoseDataFieldNumber = 5;
  const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  ::cartographer::mapping::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  ::cartographer::mapping::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SerializedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::mapping::proto::Submap* submap_;
  ::cartographer::mapping::proto::Node* node_;
  ::cartographer::mapping::proto::ImuData* imu_data_;
  ::cartographer::mapping::proto::OdometryData* odometry_data_;
  ::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Submap

// .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool Submap::has_submap_id() const {
  return this != internal_default_instance() && submap_id_ != NULL;
}
inline void Submap::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
inline const ::cartographer::mapping::proto::SubmapId& Submap::submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapId*>(
      &::cartographer::mapping::proto::_SubmapId_default_instance_);
}
inline ::cartographer::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_;
}
inline ::cartographer::mapping::proto::SubmapId* Submap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// .cartographer.mapping.proto.Submap2D submap_2d = 2;
inline bool Submap::has_submap_2d() const {
  return this != internal_default_instance() && submap_2d_ != NULL;
}
inline void Submap::clear_submap_2d() {
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
}
inline const ::cartographer::mapping::proto::Submap2D& Submap::submap_2d() const {
  const ::cartographer::mapping::proto::Submap2D* p = submap_2d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap2D*>(
      &::cartographer::mapping::proto::_Submap2D_default_instance_);
}
inline ::cartographer::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_;
}
inline ::cartographer::mapping::proto::Submap2D* Submap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  
  ::cartographer::mapping::proto::Submap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// .cartographer.mapping.proto.Submap3D submap_3d = 3;
inline bool Submap::has_submap_3d() const {
  return this != internal_default_instance() && submap_3d_ != NULL;
}
inline void Submap::clear_submap_3d() {
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}
inline const ::cartographer::mapping::proto::Submap3D& Submap::submap_3d() const {
  const ::cartographer::mapping::proto::Submap3D* p = submap_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap3D*>(
      &::cartographer::mapping::proto::_Submap3D_default_instance_);
}
inline ::cartographer::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_;
}
inline ::cartographer::mapping::proto::Submap3D* Submap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  
  ::cartographer::mapping::proto::Submap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

// -------------------------------------------------------------------

// Node

// .cartographer.mapping.proto.NodeId node_id = 1;
inline bool Node::has_node_id() const {
  return this != internal_default_instance() && node_id_ != NULL;
}
inline void Node::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
}
inline const ::cartographer::mapping::proto::NodeId& Node::node_id() const {
  const ::cartographer::mapping::proto::NodeId* p = node_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::NodeId*>(
      &::cartographer::mapping::proto::_NodeId_default_instance_);
}
inline ::cartographer::mapping::proto::NodeId* Node::mutable_node_id() {
  
  if (node_id_ == NULL) {
    node_id_ = new ::cartographer::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_id)
  return node_id_;
}
inline ::cartographer::mapping::proto::NodeId* Node::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_id)
  
  ::cartographer::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
inline void Node::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_id)
}

// .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
inline bool Node::has_node_data() const {
  return this != internal_default_instance() && node_data_ != NULL;
}
inline void Node::clear_node_data() {
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}
inline const ::cartographer::mapping::proto::TrajectoryNodeData& Node::node_data() const {
  const ::cartographer::mapping::proto::TrajectoryNodeData* p = node_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryNodeData*>(
      &::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_);
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* Node::mutable_node_data() {
  
  if (node_data_ == NULL) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_data)
  return node_data_;
}
inline ::cartographer::mapping::proto::TrajectoryNodeData* Node::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_data)
  
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
inline void Node::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_data)
}

// -------------------------------------------------------------------

// ImuData

// int32 trajectory_id = 1;
inline void ImuData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 ImuData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.trajectory_id)
  return trajectory_id_;
}
inline void ImuData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuData.trajectory_id)
}

// .cartographer.sensor.proto.ImuData imu_data = 2;
inline bool ImuData::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
inline void ImuData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
inline const ::cartographer::sensor::proto::ImuData& ImuData::imu_data() const {
  const ::cartographer::sensor::proto::ImuData* p = imu_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::ImuData*>(
      &::cartographer::sensor::proto::_ImuData_default_instance_);
}
inline ::cartographer::sensor::proto::ImuData* ImuData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::sensor::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuData.imu_data)
  return imu_data_;
}
inline ::cartographer::sensor::proto::ImuData* ImuData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuData.imu_data)
  
  ::cartographer::sensor::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
inline void ImuData::set_allocated_imu_data(::cartographer::sensor::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuData.imu_data)
}

// -------------------------------------------------------------------

// OdometryData

// int32 trajectory_id = 1;
inline void OdometryData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 OdometryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.trajectory_id)
  return trajectory_id_;
}
inline void OdometryData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.OdometryData.trajectory_id)
}

// .cartographer.sensor.proto.OdometryData odometry_data = 2;
inline bool OdometryData::has_odometry_data() const {
  return this != internal_default_instance() && odometry_data_ != NULL;
}
inline void OdometryData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
inline const ::cartographer::sensor::proto::OdometryData& OdometryData::odometry_data() const {
  const ::cartographer::sensor::proto::OdometryData* p = odometry_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.odometry_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::OdometryData*>(
      &::cartographer::sensor::proto::_OdometryData_default_instance_);
}
inline ::cartographer::sensor::proto::OdometryData* OdometryData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::sensor::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.OdometryData.odometry_data)
  return odometry_data_;
}
inline ::cartographer::sensor::proto::OdometryData* OdometryData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.OdometryData.odometry_data)
  
  ::cartographer::sensor::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
inline void OdometryData::set_allocated_odometry_data(::cartographer::sensor::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.OdometryData.odometry_data)
}

// -------------------------------------------------------------------

// FixedFramePoseData

// int32 trajectory_id = 1;
inline void FixedFramePoseData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 FixedFramePoseData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
  return trajectory_id_;
}
inline void FixedFramePoseData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
}

// .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
inline bool FixedFramePoseData::has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && fixed_frame_pose_data_ != NULL;
}
inline void FixedFramePoseData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
inline const ::cartographer::sensor::proto::FixedFramePoseData& FixedFramePoseData::fixed_frame_pose_data() const {
  const ::cartographer::sensor::proto::FixedFramePoseData* p = fixed_frame_pose_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::FixedFramePoseData*>(
      &::cartographer::sensor::proto::_FixedFramePoseData_default_instance_);
}
inline ::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::sensor::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
inline ::cartographer::sensor::proto::FixedFramePoseData* FixedFramePoseData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  
  ::cartographer::sensor::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
inline void FixedFramePoseData::set_allocated_fixed_frame_pose_data(::cartographer::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
}

// -------------------------------------------------------------------

// SerializedData

// .cartographer.mapping.proto.Submap submap = 1;
inline bool SerializedData::has_submap() const {
  return this != internal_default_instance() && submap_ != NULL;
}
inline void SerializedData::clear_submap() {
  if (GetArenaNoVirtual() == NULL && submap_ != NULL) delete submap_;
  submap_ = NULL;
}
inline const ::cartographer::mapping::proto::Submap& SerializedData::submap() const {
  const ::cartographer::mapping::proto::Submap* p = submap_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap*>(
      &::cartographer::mapping::proto::_Submap_default_instance_);
}
inline ::cartographer::mapping::proto::Submap* SerializedData::mutable_submap() {
  
  if (submap_ == NULL) {
    submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return submap_;
}
inline ::cartographer::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  delete submap_;
  submap_ = submap;
  if (submap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}

// .cartographer.mapping.proto.Node node = 2;
inline bool SerializedData::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void SerializedData::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::cartographer::mapping::proto::Node& SerializedData::node() const {
  const ::cartographer::mapping::proto::Node* p = node_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.node)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Node*>(
      &::cartographer::mapping::proto::_Node_default_instance_);
}
inline ::cartographer::mapping::proto::Node* SerializedData::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::cartographer::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.node)
  return node_;
}
inline ::cartographer::mapping::proto::Node* SerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.node)
  
  ::cartographer::mapping::proto::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.node)
}

// .cartographer.mapping.proto.ImuData imu_data = 3;
inline bool SerializedData::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
inline void SerializedData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
inline const ::cartographer::mapping::proto::ImuData& SerializedData::imu_data() const {
  const ::cartographer::mapping::proto::ImuData* p = imu_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::ImuData*>(
      &::cartographer::mapping::proto::_ImuData_default_instance_);
}
inline ::cartographer::mapping::proto::ImuData* SerializedData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.imu_data)
  return imu_data_;
}
inline ::cartographer::mapping::proto::ImuData* SerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.imu_data)
  
  ::cartographer::mapping::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_imu_data(::cartographer::mapping::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.imu_data)
}

// .cartographer.mapping.proto.OdometryData odometry_data = 4;
inline bool SerializedData::has_odometry_data() const {
  return this != internal_default_instance() && odometry_data_ != NULL;
}
inline void SerializedData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
inline const ::cartographer::mapping::proto::OdometryData& SerializedData::odometry_data() const {
  const ::cartographer::mapping::proto::OdometryData* p = odometry_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.odometry_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::OdometryData*>(
      &::cartographer::mapping::proto::_OdometryData_default_instance_);
}
inline ::cartographer::mapping::proto::OdometryData* SerializedData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.odometry_data)
  return odometry_data_;
}
inline ::cartographer::mapping::proto::OdometryData* SerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.odometry_data)
  
  ::cartographer::mapping::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_odometry_data(::cartographer::mapping::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.odometry_data)
}

// .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
inline bool SerializedData::has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && fixed_frame_pose_data_ != NULL;
}
inline void SerializedData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
inline const ::cartographer::mapping::proto::FixedFramePoseData& SerializedData::fixed_frame_pose_data() const {
  const ::cartographer::mapping::proto::FixedFramePoseData* p = fixed_frame_pose_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::FixedFramePoseData*>(
      &::cartographer::mapping::proto::_FixedFramePoseData_default_instance_);
}
inline ::cartographer::mapping::proto::FixedFramePoseData* SerializedData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
inline ::cartographer::mapping::proto::FixedFramePoseData* SerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  
  ::cartographer::mapping::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
inline void SerializedData::set_allocated_fixed_frame_pose_data(::cartographer::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED
